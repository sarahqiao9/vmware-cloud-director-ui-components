{
  "pipes": [],
  "interfaces": [
    {
      "name": "Data",
      "id": "interface-Data-8cc245a367f1f41d38f0334de8c19863",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-css-classes.example.component.ts",
      "type": "interface",
      "sourceCode": "import { Component } from '@angular/core';\nimport { GridColumn, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the css classes per row capability.\n */\n@Component({\n    selector: 'vcd-datagrid-css-classes-example',\n    styles: [\n        `\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        `,\n    ],\n    template: `\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n        ></vcd-datagrid>\n    `,\n})\nexport class DatagridCssClassesExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Some Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'warn' }, { value: 'error' }, { value: 'ok' }, { value: 'ok' }, { value: 'error' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n\n    clrDatarowCssClassGetter(entity: Data, index: number): string {\n        if (entity.value === 'warn') {\n            return 'yellow-row';\n        } else if (entity.value === 'error') {\n            return 'red-row';\n        } else {\n            return '';\n        }\n    }\n}\n",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Data",
      "id": "interface-Data-d7cd193e230962448bd9c5f671dd4460-1",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-detail-row.example.component.ts",
      "type": "interface",
      "sourceCode": "import { Component, ContentChild, TemplateRef, ElementRef } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridColumnHideable, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\">\n            <ng-template let-record=\"record\"> DETAILS: {{ record.value }} </ng-template>\n        </vcd-datagrid>\n    `,\n})\nexport class DatagridDetailRowExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "Data-1"
    },
    {
      "name": "Data",
      "id": "interface-Data-2bf45411dd462548c1f4323edbef4683-2",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-show-hide.example.component.ts",
      "type": "interface",
      "sourceCode": "import { Component } from '@angular/core';\nimport { GridColumn, GridColumnHideable, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n})\nexport class DatagridShowHideExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Shown Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Shown,\n        },\n        {\n            displayName: 'Hidden Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Hidden,\n        },\n        {\n            displayName: 'Always Shown',\n            renderer: 'value',\n            hideable: GridColumnHideable.Never,\n        },\n        {\n            displayName: 'Always Shown Way #2',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "isDuplicate": true,
      "duplicateId": 2,
      "duplicateName": "Data-2"
    },
    {
      "name": "MockRecord",
      "id": "interface-MockRecord-1803598768f93b9f95c91695bb3aefea",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
      "type": "interface",
      "sourceCode": "import { Component } from '@angular/core';\nimport {\n    BoldTextRendererComponent,\n    GridColumn,\n    GridDataFetchResult,\n    GridState,\n    RendererSpec,\n} from '@vcd/ui-components';\n\ninterface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nconst mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n@Component({\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n    selector: 'vcd-datagrd-three-rendererers-example',\n})\nexport class DatagridThreeRenderersExampleComponent {\n    gridData: GridDataFetchResult<MockRecord> = {\n        items: [],\n    };\n\n    columns: GridColumn<MockRecord>[] = [\n        {\n            displayName: 'Component Renderer',\n            renderer: RendererSpec({\n                type: BoldTextRendererComponent,\n                config: record => ({\n                    text: record.name,\n                }),\n            }),\n        },\n        {\n            displayName: 'Function Renderer',\n            renderer: (record: MockRecord) => `${record.city}, ${record.state}`,\n        },\n\n        {\n            displayName: 'Default Renderer',\n            renderer: 'details.gender',\n        },\n    ];\n\n    refresh(eventData: GridState<MockRecord>): void {\n        this.gridData = {\n            items: mockData,\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "properties": [
        {
          "name": "age",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "city",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "details",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "state",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "SideNavEntries",
      "id": "interface-SideNavEntries-3e13834856e331f3b361f4a70791d1d3",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.component.ts",
      "type": "interface",
      "sourceCode": "import { Component } from '@angular/core';\nimport { Documentation, DocumentationEntry } from '@vcd/ui-doc-lib';\nimport { Router } from '@angular/router';\n\ninterface SideNavEntries {\n    title: string;\n    path: string;\n}\n\n@Component({\n    selector: 'vcd-examples-app',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    /**\n     * Gets the registered documentation entries {@link Documentation.getAllEntries} and sets them on a array to display\n     * on the side navigation\n     */\n    sideNavEntries: SideNavEntries[] = Documentation.getAllEntries().map((entry: DocumentationEntry) => ({\n        title: entry.displayName,\n        path: entry.urlSegment,\n    }));\n\n    constructor(router: Router) {\n        /**\n         * Gets the Angular routes to be navigated in the app components's router outlet\n         * Loading the routes in {@link AppRoutingModule} is causing the following error: ERROR in Cannot read property\n         * 'loadChildren' of undefined https://stackoverflow.com/questions/44233195/dynamically-adding-routes-in-angular\n         * TODO: https://jira.eng.vmware.com/browse/VDUCC-72\n         */\n        router.resetConfig(Documentation.getRoutes());\n    }\n}\n",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-3e13834856e331f3b361f4a70791d1d3",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-examples-app",
      "styleUrls": [
        "./app.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./app.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "sideNavEntries",
          "defaultValue": "Documentation.getAllEntries().map((entry: DocumentationEntry) => ({\n        title: entry.displayName,\n        path: entry.urlSegment,\n    }))",
          "type": "SideNavEntries[]",
          "optional": false,
          "description": "<p>Gets the registered documentation entries {@link Documentation.getAllEntries} and sets them on a array to display\non the side navigation</p>\n",
          "line": 25
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { Documentation, DocumentationEntry } from '@vcd/ui-doc-lib';\nimport { Router } from '@angular/router';\n\ninterface SideNavEntries {\n    title: string;\n    path: string;\n}\n\n@Component({\n    selector: 'vcd-examples-app',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    /**\n     * Gets the registered documentation entries {@link Documentation.getAllEntries} and sets them on a array to display\n     * on the side navigation\n     */\n    sideNavEntries: SideNavEntries[] = Documentation.getAllEntries().map((entry: DocumentationEntry) => ({\n        title: entry.displayName,\n        path: entry.urlSegment,\n    }));\n\n    constructor(router: Router) {\n        /**\n         * Gets the Angular routes to be navigated in the app components's router outlet\n         * Loading the routes in {@link AppRoutingModule} is causing the following error: ERROR in Cannot read property\n         * 'loadChildren' of undefined https://stackoverflow.com/questions/44233195/dynamically-adding-routes-in-angular\n         * TODO: https://jira.eng.vmware.com/browse/VDUCC-72\n         */\n        router.resetConfig(Documentation.getRoutes());\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "router",
            "type": "Router"
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "router",
            "type": "Router",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<clr-main-container>\n    <clr-header class=\"header-6\">\n        <div class=\"branding\">\n            <a routerLink=\"/\" class=\"nav-nlink\">\n                <clr-icon shape=\"vm-bug\"></clr-icon>\n                <span class=\"title\">{{ 'app.title' | translate }}</span>\n            </a>\n        </div>\n    </clr-header>\n\n    <div class=\"content-container\">\n        <nav class=\"sidenav\" [clr-nav-level]=\"2\">\n            <section class=\"sidenav-content\">\n                <section class=\"nav-group\">\n                    <label>Components</label>\n                    <ul class=\"nav-list\">\n                        <ng-container *ngFor=\"let entry of sideNavEntries\">\n                            <li>\n                                <a class=\"nav-link\" [routerLink]=\"entry.path\" [routerLinkActive]=\"['active']\">\n                                    {{ entry.title }}\n                                </a>\n                            </li>\n                        </ng-container>\n                    </ul>\n                </section>\n            </section>\n        </nav>\n\n        <main class=\"content-area\">\n            <router-outlet></router-outlet>\n        </main>\n    </div>\n</clr-main-container>\n"
    },
    {
      "name": "CliptextDatagridExampleComponent",
      "id": "component-CliptextDatagridExampleComponent-2243495459d93a7e91f4bfeab8c7052c",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-datagrid.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-cliptext-datagrid-example",
      "styleUrls": [],
      "styles": [
        "\n            clr-datagrid .clip-text-width {\n                width: 200px;\n            }\n        "
      ],
      "template": "Resize the column and observe the text in the row where the textclip is used. Hover over the cell to see the\nfull text.\n\n<clr-datagrid>\n    <clr-dg-column class=\"clip-text-width\">Text</clr-dg-column>\n    <clr-dg-column>Clipping</clr-dg-column>\n\n    <clr-dg-row>\n        <clr-dg-cell>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n            dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula non.\n            Etiam ac pulvinar odio.\n        </clr-dg-cell>\n        <clr-dg-cell>\n            No\n        </clr-dg-cell>\n    </clr-dg-row>\n\n    <clr-dg-row>\n        <clr-dg-cell>\n            <vcd-cliptext>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula\n                non. Etiam ac pulvinar odio.\n            </vcd-cliptext>\n        </clr-dg-cell>\n        <clr-dg-cell>\n            Yes\n        </clr-dg-cell>\n    </clr-dg-row>\n</clr-datagrid>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'vcd-cliptext-datagrid-example',\n    styles: [\n        `\n            clr-datagrid .clip-text-width {\n                width: 200px;\n            }\n        `,\n    ],\n    template: `\n        Resize the column and observe the text in the row where the textclip is used. Hover over the cell to see the\n        full text.\n\n        <clr-datagrid>\n            <clr-dg-column class=\"clip-text-width\">Text</clr-dg-column>\n            <clr-dg-column>Clipping</clr-dg-column>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                    dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula non.\n                    Etiam ac pulvinar odio.\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    No\n                </clr-dg-cell>\n            </clr-dg-row>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    <vcd-cliptext>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                        dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula\n                        non. Etiam ac pulvinar odio.\n                    </vcd-cliptext>\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    Yes\n                </clr-dg-cell>\n            </clr-dg-row>\n        </clr-datagrid>\n    `,\n})\nexport class CliptextDatagridExampleComponent {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n            clr-datagrid .clip-text-width {\n                width: 200px;\n            }\n        \n"
    },
    {
      "name": "CliptextDynamicInlineExampleComponent",
      "id": "component-CliptextDynamicInlineExampleComponent-8740f46a6567cb461929f3417f2afd7d",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-dynamic-inline.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-cliptext-dynamic-inline-example",
      "styleUrls": [],
      "styles": [
        "\n            vcd-cliptext {\n                font-weight: bold;\n            }\n        "
      ],
      "template": "<label>Dynamic text:</label>\n<input placeholder=\"Write some text\" [formControl]=\"dynamicText\" />\n<p>\n    Modify the input above and observe the text:\n    <vcd-cliptext [inlineWidth]=\"'200px'\">{{ dynamicText.value }}</vcd-cliptext>\n    You can try with long and short text. There is no tooltip when the text fits the provided width.\n</p>\n<p>The toolptip is updated upon display.</p>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dynamicText",
          "defaultValue": "new FormControl('Dynamic text goes here')",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'vcd-cliptext-dynamic-inline-example',\n    styles: [\n        `\n            vcd-cliptext {\n                font-weight: bold;\n            }\n        `,\n    ],\n\n    template: `\n        <label>Dynamic text:</label>\n        <input placeholder=\"Write some text\" [formControl]=\"dynamicText\" />\n        <p>\n            Modify the input above and observe the text:\n            <vcd-cliptext [inlineWidth]=\"'200px'\">{{ dynamicText.value }}</vcd-cliptext>\n            You can try with long and short text. There is no tooltip when the text fits the provided width.\n        </p>\n        <p>The toolptip is updated upon display.</p>\n    `,\n})\nexport class CliptextDynamicInlineExampleComponent {\n    dynamicText = new FormControl('Dynamic text goes here');\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n            vcd-cliptext {\n                font-weight: bold;\n            }\n        \n"
    },
    {
      "name": "DataExporterExampleComponent",
      "id": "component-DataExporterExampleComponent-a50bd36570d214d1c5597a4be9a178b7",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/data-exporter/data-exporter.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-data-exporter-example",
      "styleUrls": [],
      "styles": [],
      "template": "<h2>Data Exporter</h2>\n<button (click)=\"dataExporterOpen = true\">\n    Show Modal\n</button>\n<vcd-data-exporter\n    *ngIf=\"dataExporterOpen\"\n    [(open)]=\"dataExporterOpen\"\n    (dataExportRequest)=\"onExportRequest($event)\"\n    [columns]=\"exportColumns\"\n>\n</vcd-data-exporter>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dataExporterOpen",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "exportColumns",
          "defaultValue": "[\n        { fieldName: 'name', displayName: 'Name' },\n        { fieldName: 'desc', displayName: 'Description' },\n    ]",
          "type": "ExportColumn[]",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methodsClass": [
        {
          "name": "onExportRequest",
          "args": [
            {
              "name": "request",
              "type": "DataExportRequestEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33,
          "jsdoctags": [
            {
              "name": "request",
              "type": "DataExportRequestEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { DataExportRequestEvent, ExportColumn } from '@vcd/ui-components';\n\n@Component({\n    selector: 'vcd-data-exporter-example',\n    template: `\n        <h2>Data Exporter</h2>\n        <button (click)=\"dataExporterOpen = true\">\n            Show Modal\n        </button>\n        <vcd-data-exporter\n            *ngIf=\"dataExporterOpen\"\n            [(open)]=\"dataExporterOpen\"\n            (dataExportRequest)=\"onExportRequest($event)\"\n            [columns]=\"exportColumns\"\n        >\n        </vcd-data-exporter>\n    `,\n})\nexport class DataExporterExampleComponent {\n    exportColumns: ExportColumn[] = [\n        { fieldName: 'name', displayName: 'Name' },\n        { fieldName: 'desc', displayName: 'Description' },\n    ];\n\n    dataExporterOpen = false;\n\n    onExportRequest(request: DataExportRequestEvent): void {\n        let currentProgress = 0;\n\n        const updateProgress = () => {\n            currentProgress += 0.01;\n            if (currentProgress < 1) {\n                request.updateProgress(currentProgress);\n                setTimeout(updateProgress, 50);\n            } else {\n                request.exportData([\n                    { name: 'Jack', desc: 'Tis what tis' },\n                    { name: 'Jill', desc: 'Still tis what tis' },\n                ]);\n            }\n        };\n        updateProgress();\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "DatagridCssClassesExampleComponent",
      "id": "component-DatagridCssClassesExampleComponent-8cc245a367f1f41d38f0334de8c19863",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-css-classes.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-datagrid-css-classes-example",
      "styleUrls": [],
      "styles": [
        "\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        "
      ],
      "template": "<vcd-datagrid\n    [gridData]=\"gridData\"\n    (gridRefresh)=\"refresh($event)\"\n    [columns]=\"columns\"\n    [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n></vcd-datagrid>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "columns",
          "defaultValue": "[\n        {\n            displayName: 'Some Column',\n            renderer: 'value',\n        },\n    ]",
          "type": "GridColumn<Data>[]",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "gridData",
          "defaultValue": "{\n        items: [],\n    }",
          "type": "GridDataFetchResult<Data>",
          "optional": false,
          "description": "",
          "line": 39
        }
      ],
      "methodsClass": [
        {
          "name": "clrDatarowCssClassGetter",
          "args": [
            {
              "name": "entity",
              "type": "Data"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 59,
          "jsdoctags": [
            {
              "name": "entity",
              "type": "Data",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "index",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "refresh",
          "args": [
            {
              "name": "eventData",
              "type": "GridState<Data>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "jsdoctags": [
            {
              "name": "eventData",
              "type": "GridState<Data>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>A component that holds an example of the css classes per row capability.</p>\n",
      "rawdescription": "A component that holds an example of the css classes per row capability.",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { GridColumn, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the css classes per row capability.\n */\n@Component({\n    selector: 'vcd-datagrid-css-classes-example',\n    styles: [\n        `\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        `,\n    ],\n    template: `\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n        ></vcd-datagrid>\n    `,\n})\nexport class DatagridCssClassesExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Some Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'warn' }, { value: 'error' }, { value: 'ok' }, { value: 'ok' }, { value: 'error' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n\n    clrDatarowCssClassGetter(entity: Data, index: number): string {\n        if (entity.value === 'warn') {\n            return 'yellow-row';\n        } else if (entity.value === 'error') {\n            return 'red-row';\n        } else {\n            return '';\n        }\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        \n"
    },
    {
      "name": "DatagridDetailRowExampleComponent",
      "id": "component-DatagridDetailRowExampleComponent-d7cd193e230962448bd9c5f671dd4460",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-detail-row.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-datagrid-show-hide-example",
      "styleUrls": [],
      "styles": [],
      "template": "<vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\">\n    <ng-template let-record=\"record\"> DETAILS: {{ record.value }} </ng-template>\n</vcd-datagrid>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "columns",
          "defaultValue": "[\n        {\n            displayName: 'Column',\n            renderer: 'value',\n        },\n    ]",
          "type": "GridColumn<Data>[]",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "gridData",
          "defaultValue": "{\n        items: [],\n    }",
          "type": "GridDataFetchResult<Data>",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "refresh",
          "args": [
            {
              "name": "eventData",
              "type": "GridState<Data>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "jsdoctags": [
            {
              "name": "eventData",
              "type": "GridState<Data>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>A component that holds an example of the show/hide columns capability.</p>\n",
      "rawdescription": "A component that holds an example of the show/hide columns capability.",
      "type": "component",
      "sourceCode": "import { Component, ContentChild, TemplateRef, ElementRef } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridColumnHideable, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\">\n            <ng-template let-record=\"record\"> DETAILS: {{ record.value }} </ng-template>\n        </vcd-datagrid>\n    `,\n})\nexport class DatagridDetailRowExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "DatagridShowHideExampleComponent",
      "id": "component-DatagridShowHideExampleComponent-2bf45411dd462548c1f4323edbef4683",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-show-hide.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-datagrid-show-hide-example",
      "styleUrls": [],
      "styles": [],
      "template": "<vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "columns",
          "defaultValue": "[\n        {\n            displayName: 'Shown Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Shown,\n        },\n        {\n            displayName: 'Hidden Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Hidden,\n        },\n        {\n            displayName: 'Always Shown',\n            renderer: 'value',\n            hideable: GridColumnHideable.Never,\n        },\n        {\n            displayName: 'Always Shown Way #2',\n            renderer: 'value',\n        },\n    ]",
          "type": "GridColumn<Data>[]",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "gridData",
          "defaultValue": "{\n        items: [],\n    }",
          "type": "GridDataFetchResult<Data>",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "methodsClass": [
        {
          "name": "refresh",
          "args": [
            {
              "name": "eventData",
              "type": "GridState<Data>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "jsdoctags": [
            {
              "name": "eventData",
              "type": "GridState<Data>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>A component that holds an example of the show/hide columns capability.</p>\n",
      "rawdescription": "A component that holds an example of the show/hide columns capability.",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { GridColumn, GridColumnHideable, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n})\nexport class DatagridShowHideExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Shown Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Shown,\n        },\n        {\n            displayName: 'Hidden Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Hidden,\n        },\n        {\n            displayName: 'Always Shown',\n            renderer: 'value',\n            hideable: GridColumnHideable.Never,\n        },\n        {\n            displayName: 'Always Shown Way #2',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "DatagridThreeRenderersExampleComponent",
      "id": "component-DatagridThreeRenderersExampleComponent-1803598768f93b9f95c91695bb3aefea",
      "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vcd-datagrd-three-rendererers-example",
      "styleUrls": [],
      "styles": [],
      "template": "<vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "columns",
          "defaultValue": "[\n        {\n            displayName: 'Component Renderer',\n            renderer: RendererSpec({\n                type: BoldTextRendererComponent,\n                config: record => ({\n                    text: record.name,\n                }),\n            }),\n        },\n        {\n            displayName: 'Function Renderer',\n            renderer: (record: MockRecord) => `${record.city}, ${record.state}`,\n        },\n\n        {\n            displayName: 'Default Renderer',\n            renderer: 'details.gender',\n        },\n    ]",
          "type": "GridColumn<MockRecord>[]",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "gridData",
          "defaultValue": "{\n        items: [],\n    }",
          "type": "GridDataFetchResult<MockRecord>",
          "optional": false,
          "description": "",
          "line": 53
        }
      ],
      "methodsClass": [
        {
          "name": "refresh",
          "args": [
            {
              "name": "eventData",
              "type": "GridState<MockRecord>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "jsdoctags": [
            {
              "name": "eventData",
              "type": "GridState<MockRecord>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport {\n    BoldTextRendererComponent,\n    GridColumn,\n    GridDataFetchResult,\n    GridState,\n    RendererSpec,\n} from '@vcd/ui-components';\n\ninterface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nconst mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n@Component({\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n    selector: 'vcd-datagrd-three-rendererers-example',\n})\nexport class DatagridThreeRenderersExampleComponent {\n    gridData: GridDataFetchResult<MockRecord> = {\n        items: [],\n    };\n\n    columns: GridColumn<MockRecord>[] = [\n        {\n            displayName: 'Component Renderer',\n            renderer: RendererSpec({\n                type: BoldTextRendererComponent,\n                config: record => ({\n                    text: record.name,\n                }),\n            }),\n        },\n        {\n            displayName: 'Function Renderer',\n            renderer: (record: MockRecord) => `${record.city}, ${record.state}`,\n        },\n\n        {\n            displayName: 'Default Renderer',\n            renderer: 'details.gender',\n        },\n    ];\n\n    refresh(eventData: GridState<MockRecord>): void {\n        this.gridData = {\n            items: mockData,\n            totalItems: 2,\n            pageSize: 2,\n            page: 1,\n        };\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "CliptextExamplesModule"
            },
            {
              "name": "DataExporterExamplesModule"
            },
            {
              "name": "DatagridExamplesModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "AppModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { registerLocaleData } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CompodocSchema, DocLibModule } from '@vcd/ui-doc-lib';\n\nimport { AppComponent } from './app.component';\nimport { CliptextExamplesModule } from '../components/cliptext/cliptext.examples.module';\nimport { DataExporterExamplesModule } from '../components/data-exporter/data-exporter.examples.module';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeEs from '@angular/common/locales/es';\nimport componentsDocumentationJson from '../../gen/components-doc.json';\nimport examplesDocumentationJson from '../../gen/examples-doc.json';\nimport { DatagridExamplesModule } from '../components/datagrid/datagrid.examples.module';\nimport { StackBlitzInfo } from '../../../doc-lib/src/stack-blitz-writer.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { I18nModule, TranslationService } from '@vcd/ui-i18n';\nimport { FormsModule } from '@angular/forms';\nimport { DatagridModule } from 'projects/components/src/datagrid';\nimport { DataExporterModule } from 'projects/components/src/public-api';\nimport { CliptextModule } from 'projects/components/src/cliptext';\n\nregisterLocaleData(localeFr, 'fr');\nregisterLocaleData(localeEs, 'es');\n\nconst ASSET_URL = new InjectionToken('ASSETS');\n\n/**\n * The following 2 constants are declared for AOT compilation purpose. Otherwise, the compilation would silently fail and\n * the doc jsons are given as null to the DocLibModule.\n * NOTE: The following two has to be exported otherwise the AoT compiler won't see it.\n */\nexport const docJson1: CompodocSchema = componentsDocumentationJson;\nexport const docJson2: CompodocSchema = examplesDocumentationJson;\nexport const sbInfo: StackBlitzInfo = {\n    templateId: 'vcd-ui-cc-starter-clarity-v8-yhe4yg',\n    projectName: 'VMware Cloud Director UI Components',\n    moduleFinder(componentName: string): string {\n        return componentName.replace('ExampleComponent', 'ExampleModule');\n    },\n};\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        HttpClientModule,\n        I18nModule.forChild(ASSET_URL, true),\n        BrowserModule,\n        AppRoutingModule,\n        DocLibModule,\n        ClarityModule,\n        BrowserAnimationsModule,\n        DocLibModule.forRoot([docJson1, docJson2], sbInfo),\n        CliptextExamplesModule,\n        FormsModule,\n        DatagridExamplesModule,\n        DataExporterExamplesModule,\n        DatagridModule,\n        DataExporterModule,\n        CliptextModule,\n    ],\n    providers: [\n        {\n            provide: ASSET_URL,\n            useFactory: () => 'assets/translations',\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {\n    constructor(translationService: TranslationService) {\n        translationService.registerTranslations();\n    }\n}\n"
    },
    {
      "name": "AppRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "AppRoutingModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app-routing.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [RouterModule.forRoot([])],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n"
    },
    {
      "name": "CliptextDatagridExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CliptextDatagridExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CliptextDatagridExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "CliptextDatagridExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-datagrid.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CliptextDatagridExampleComponent } from './cliptext-datagrid.example.component';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CliptextModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [CliptextDatagridExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, CliptextModule],\n    exports: [CliptextDatagridExampleComponent],\n    entryComponents: [CliptextDatagridExampleComponent],\n})\nexport class CliptextDatagridExampleModule {}\n"
    },
    {
      "name": "CliptextDynamicInlineExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CliptextDynamicInlineExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "CliptextDynamicInlineExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "CliptextDynamicInlineExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-dynamic-inline.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { CliptextModule } from '@vcd/ui-components';\nimport { CliptextDynamicInlineExampleComponent } from './cliptext-dynamic-inline.example.component';\n\n@NgModule({\n    declarations: [CliptextDynamicInlineExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, CliptextModule],\n    exports: [CliptextDynamicInlineExampleComponent],\n    entryComponents: [CliptextDynamicInlineExampleComponent],\n})\nexport class CliptextDynamicInlineExampleModule {}\n"
    },
    {
      "name": "CliptextExamplesModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "CliptextDatagridExampleModule"
            },
            {
              "name": "CliptextDynamicInlineExampleModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "CliptextExamplesModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext.examples.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { CliptextComponent } from '@vcd/ui-components';\nimport { CliptextDatagridExampleComponent } from './cliptext-datagrid.example.component';\nimport { CliptextDynamicInlineExampleComponent } from './cliptext-dynamic-inline.example.component';\nimport { CliptextDatagridExampleModule } from './cliptext-datagrid.example.module';\nimport { CliptextDynamicInlineExampleModule } from './cliptext-dynamic-inline.example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: CliptextComponent,\n    displayName: 'Cliptext',\n    urlSegment: 'cliptext',\n    examples: [\n        {\n            component: CliptextDatagridExampleComponent,\n            forComponent: null,\n            title: 'Cliptext in a datagrid',\n        },\n        {\n            component: CliptextDynamicInlineExampleComponent,\n            forComponent: null,\n            title: 'Dynamic Inline Text',\n        },\n    ],\n});\n\n@NgModule({\n    imports: [CliptextDatagridExampleModule, CliptextDynamicInlineExampleModule],\n})\nexport class CliptextExamplesModule {}\n"
    },
    {
      "name": "DataExporterExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DataExporterExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DataExporterExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DataExporterExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/data-exporter/data-exporter.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DataExporterExampleComponent } from './data-exporter.example.component';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DataExporterModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [DataExporterExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DataExporterModule],\n    exports: [DataExporterExampleComponent],\n    entryComponents: [DataExporterExampleComponent],\n})\nexport class DataExporterExampleModule {}\n"
    },
    {
      "name": "DataExporterExamplesModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "DataExporterExampleModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DataExporterExamplesModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/data-exporter/data-exporter.examples.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\nimport { NgModule } from '@angular/core';\nimport { DataExporterExampleComponent } from './data-exporter.example.component';\n\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DataExporterComponent } from '@vcd/ui-components';\nimport { DataExporterExampleModule } from './data-exporter.example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: DataExporterComponent,\n    displayName: 'Data Exporter',\n    urlSegment: 'dataExporter',\n    examples: [\n        {\n            component: DataExporterExampleComponent,\n            forComponent: null,\n            title: 'Data Exporter example',\n        },\n    ],\n});\n\n@NgModule({\n    imports: [DataExporterExampleModule],\n})\nexport class DataExporterExamplesModule {}\n"
    },
    {
      "name": "DatagridCssClassesExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DatagridCssClassesExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DatagridCssClassesExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DatagridCssClassesExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-css-classes.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridCssClassesExampleComponent } from './datagrid-css-classes.example.component';\n\n@NgModule({\n    declarations: [DatagridCssClassesExampleComponent],\n    imports: [CommonModule, ClarityModule, DatagridModule],\n    exports: [DatagridCssClassesExampleComponent],\n    entryComponents: [DatagridCssClassesExampleComponent],\n})\nexport class DatagridCssClassesExampleModule {}\n"
    },
    {
      "name": "DatagridDetailRowExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DatagridDetailRowExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DatagridDetailRowExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DatagridDetailRowExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-detail-row.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridDetailRowExampleComponent } from './datagrid-detail-row.example.component';\n\n@NgModule({\n    declarations: [DatagridDetailRowExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridDetailRowExampleComponent],\n    entryComponents: [DatagridDetailRowExampleComponent],\n})\nexport class DatagridDetailRowExampleModule {}\n"
    },
    {
      "name": "DatagridExamplesModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "DatagridCssClassesExampleModule"
            },
            {
              "name": "DatagridDetailRowExampleModule"
            },
            {
              "name": "DatagridShowHideExampleModule"
            },
            {
              "name": "DatagridThreeRenderersExampleModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DatagridExamplesModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid.examples.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DatagridShowHideExampleComponent } from './datagrid-show-hide.example.component';\nimport { DatagridComponent } from '@vcd/ui-components';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DatagridCssClassesExampleComponent } from './datagrid-css-classes.example.component';\nimport { DatagridThreeRenderersExampleComponent } from './datagrid-three-renderers.example.component';\nimport { DatagridThreeRenderersExampleModule } from './datagrid-three-renderers.example.module';\nimport { DatagridCssClassesExampleModule } from './datagrid-css-classes.example.module';\nimport { DatagridShowHideExampleModule } from './datagrid-show-hide.example.module';\nimport { DatagridDetailRowExampleComponent } from './datagrid-detail-row.example.component';\nimport { DatagridDetailRowExampleModule } from './datagrid-detail-row.example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: DatagridComponent,\n    displayName: 'Datagrid',\n    urlSegment: 'datagrid',\n    examples: [\n        {\n            component: DatagridThreeRenderersExampleComponent,\n            forComponent: null,\n            title: 'Example with 3 types of grid renderers',\n        },\n        {\n            component: DatagridCssClassesExampleComponent,\n            forComponent: null,\n            title: 'Component that holds an example of the css classes per row capability',\n        },\n        {\n            component: DatagridShowHideExampleComponent,\n            forComponent: null,\n            title: 'Show/Hide datagrid columns example',\n        },\n        {\n            component: DatagridDetailRowExampleComponent,\n            forComponent: null,\n            title: 'Detail row datagrid example',\n        },\n    ],\n});\n/**\n * A module that imports all data grid example modules\n */\n@NgModule({\n    imports: [\n        DatagridThreeRenderersExampleModule,\n        DatagridCssClassesExampleModule,\n        DatagridShowHideExampleModule,\n        DatagridDetailRowExampleModule,\n    ],\n})\nexport class DatagridExamplesModule {}\n"
    },
    {
      "name": "DatagridShowHideExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DatagridShowHideExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DatagridShowHideExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DatagridShowHideExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-show-hide.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridShowHideExampleComponent } from './datagrid-show-hide.example.component';\nimport { DatagridModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [DatagridShowHideExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridShowHideExampleComponent],\n    entryComponents: [DatagridShowHideExampleComponent],\n})\nexport class DatagridShowHideExampleModule {}\n"
    },
    {
      "name": "DatagridThreeRenderersExampleModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "DatagridThreeRenderersExampleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DatagridThreeRenderersExampleComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DatagridThreeRenderersExampleModule",
      "path": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.module.ts",
      "sourceCode": "/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridThreeRenderersExampleComponent } from './datagrid-three-renderers.example.component';\n\n@NgModule({\n    declarations: [DatagridThreeRenderersExampleComponent],\n    imports: [CommonModule, ClarityModule, DatagridModule],\n    exports: [DatagridThreeRenderersExampleComponent],\n    entryComponents: [DatagridThreeRenderersExampleComponent],\n})\nexport class DatagridThreeRenderersExampleModule {}\n"
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "ASSET_URL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "",
        "defaultValue": "new InjectionToken('ASSETS')"
      },
      {
        "name": "docJson1",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "CompodocSchema",
        "defaultValue": "componentsDocumentationJson",
        "description": "<p>The following 2 constants are declared for AOT compilation purpose. Otherwise, the compilation would silently fail and\nthe doc jsons are given as null to the DocLibModule.\nNOTE: The following two has to be exported otherwise the AoT compiler won&#39;t see it.</p>\n"
      },
      {
        "name": "docJson2",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "CompodocSchema",
        "defaultValue": "examplesDocumentationJson"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n    production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n    production: false,\n}"
      },
      {
        "name": "mockData",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
        "type": "MockRecord[]",
        "defaultValue": "[\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]"
      },
      {
        "name": "sbInfo",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "StackBlitzInfo",
        "defaultValue": "{\n    templateId: 'vcd-ui-cc-starter-clarity-v8-yhe4yg',\n    projectName: 'VMware Cloud Director UI Components',\n    moduleFinder(componentName: string): string {\n        return componentName.replace('ExampleComponent', 'ExampleModule');\n    },\n}"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts": [
        {
          "name": "ASSET_URL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
          "type": "",
          "defaultValue": "new InjectionToken('ASSETS')"
        },
        {
          "name": "docJson1",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
          "type": "CompodocSchema",
          "defaultValue": "componentsDocumentationJson",
          "description": "<p>The following 2 constants are declared for AOT compilation purpose. Otherwise, the compilation would silently fail and\nthe doc jsons are given as null to the DocLibModule.\nNOTE: The following two has to be exported otherwise the AoT compiler won&#39;t see it.</p>\n"
        },
        {
          "name": "docJson2",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
          "type": "CompodocSchema",
          "defaultValue": "examplesDocumentationJson"
        },
        {
          "name": "sbInfo",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
          "type": "StackBlitzInfo",
          "defaultValue": "{\n    templateId: 'vcd-ui-cc-starter-clarity-v8-yhe4yg',\n    projectName: 'VMware Cloud Director UI Components',\n    moduleFinder(componentName: string): string {\n        return componentName.replace('ExampleComponent', 'ExampleModule');\n    },\n}"
        }
      ],
      "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n    production: true,\n}"
        }
      ],
      "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n    production: false,\n}"
        }
      ],
      "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts": [
        {
          "name": "mockData",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
          "type": "MockRecord[]",
          "defaultValue": "[\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n]"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 10,
    "status": "low",
    "files": [
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SideNavEntries",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ASSET_URL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "docJson1",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "docJson2",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/app/app.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "sbInfo",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-datagrid.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CliptextDatagridExampleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/cliptext/cliptext-dynamic-inline.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CliptextDynamicInlineExampleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/data-exporter/data-exporter.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DataExporterExampleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-css-classes.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridCssClassesExampleComponent",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-css-classes.example.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Data",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-detail-row.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridDetailRowExampleComponent",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-detail-row.example.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Data",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-show-hide.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridShowHideExampleComponent",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-show-hide.example.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Data",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridThreeRenderersExampleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "MockRecord",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/components/datagrid/datagrid-three-renderers.example.component.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "mockData",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "/Users/rbradford/Documents/repo/core/projects/examples/src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}