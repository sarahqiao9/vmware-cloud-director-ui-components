{"version":3,"sources":["/home/travis/build/vmware/vmware-cloud-director-ui-components/dist/components/fesm2015/vcd-ui-components.js","/home/travis/build/vmware/vmware-cloud-director-ui-components/dist/doc-lib/fesm2015/vcd-ui-doc-lib.js","/home/travis/build/vmware/vmware-cloud-director-ui-components/dist/i18n/fesm2015/vcd-i18n.js","../components/src/cliptext/cliptext.component.html","../components/src/data-exporter/data-exporter.component.html","../components/src/datagrid/datagrid.component.html","./src/app/app.component.html","/home/travis/build/vmware/vmware-cloud-director-ui-components/node_modules/tslib/tslib.es6.js","../components/src/cliptext/cliptext.component.scss","../components/src/cliptext/cliptext.component.ts","../components/src/cliptext/cliptext.module.ts","../components/src/cliptext/index.ts","../components/src/common/pipes/nested-property.pipe.ts","../components/src/common/pipes/pipes.module.ts","../components/src/components.module.ts","../components/src/data-exporter/csv-exporter.service.ts","../components/src/data-exporter/data-exporter.component.scss","../components/src/data-exporter/data-exporter.component.ts","../components/src/data-exporter/data-exporter.module.ts","../components/src/data-exporter/index.ts","../components/src/datagrid/datagrid.component.ts","../components/src/datagrid/datagrid.module.ts","../components/src/datagrid/directives/component-renderer-outlet.directive.ts","../components/src/datagrid/index.ts","../components/src/datagrid/interfaces/component-renderer.interface.ts","../components/src/datagrid/interfaces/datagrid-column.interface.ts","../components/src/datagrid/pipes/function-renderer.pipe.ts","../components/src/datagrid/renderers/bold-text-renderer.component.ts","../components/src/datagrid/renderers/index.ts","../components/src/public-api.ts","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/components/cliptext/cliptext-datagrid.example.component.ts","./src/components/cliptext/cliptext-datagrid.example.module.ts","./src/components/cliptext/cliptext-dynamic-inline.example.component.ts","./src/components/cliptext/cliptext-dynamic-inline.example.module.ts","./src/components/cliptext/cliptext.examples.module.ts","./src/components/data-exporter/data-exporter.example.component.ts","./src/components/data-exporter/data-exporter.example.module.ts","./src/components/data-exporter/data-exporter.examples.module.ts","./src/components/datagrid/datagrid-css-classes.example.component.ts","./src/components/datagrid/datagrid-css-classes.example.module.ts","./src/components/datagrid/datagrid-detail-row.example.component.ts","./src/components/datagrid/datagrid-detail-row.example.module.ts","./src/components/datagrid/datagrid-pagination-example.component.ts","./src/components/datagrid/datagrid-pagination-example.module.ts","./src/components/datagrid/datagrid-row-select.example.component.ts","./src/components/datagrid/datagrid-row-select.example.module.ts","./src/components/datagrid/datagrid-show-hide.example.component.ts","./src/components/datagrid/datagrid-show-hide.example.module.ts","./src/components/datagrid/datagrid-sort.example.component.ts","./src/components/datagrid/datagrid-sort.example.module.ts","./src/components/datagrid/datagrid-three-renderers.example.component.ts","./src/components/datagrid/datagrid-three-renderers.example.module.ts","./src/components/datagrid/datagrid.examples.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuQ;AAC1L;AACtC;AAC+B;AAC4D;AACnD;;AAE/E;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,cAAc;AACjD,mBAAmB,EAAE;AACrB,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA,wDAAwD,wEAAkB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACjN;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAyB,YAAY,yCAAyC;AAC5G;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,wDAAwD,0DAAW;AACnE;AACA,SAAS,KAAK;AACd,6BAA6B,wDAAS;AACtC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,gLAAgL,uDAAuD,oSAAoS,+CAA+C,4TAA4T,mBAAmB,kIAAkI,kDAAkD,iDAAiD,kBAAkB,sMAAsM,wCAAwC,kKAAkK,wCAAwC;AACxjD,uCAAuC,kBAAkB,qBAAqB,mBAAmB,kBAAkB,SAAS,UAAU;AACtI,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,YAAY,OAAO,mDAAK,EAAE;AAC1B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,yBAAyB,OAAO,oDAAM,EAAE;AACxC;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,0BAA0B,4DAAY,EAAE,kEAAmB,EAAE,0DAAa,EAAE,oDAAU;AACtF;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sEAAsE,qBAAqB;AAC3F,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,kBAAkB,UAAU,KAAK,SAAS,MAAM,WAAW;AAC3D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,iDAAiD;AACjD;AACA,yDAAyD,EAAE;AAC3D;AACA,kCAAkC,EAAE;AACpC,mEAAmE,EAAE;AACrE;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,kYAAkY,wEAAwE,wDAAwD,KAAK,oDAAoD,8EAA8E,sBAAsB,gGAAgG,6TAA6T,+CAA+C,2HAA2H,mFAAmF,6MAA6M,kEAAkE,uRAAuR,WAAW,mBAAmB,8YAA8Y,wDAAwD,mCAAmC,6CAA6C;AACn5E,aAAa;AACb;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,0DAAY,SAAS,yDAAW,GAAG,gBAAgB,IAAI;AACpF,2BAA2B,OAAO,mDAAK,EAAE;AACzC,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,kBAAkB,OAAO,mDAAK,EAAE;AAChC,mBAAmB,OAAO,oDAAM,EAAE;AAClC,qBAAqB,OAAO,uDAAS,SAAS,8DAAiB,GAAG,gBAAgB,IAAI;AACtF,gBAAgB,OAAO,uDAAS,SAAS,wDAAW,GAAG,eAAe,IAAI;AAC1E,2BAA2B,OAAO,uDAAS,SAAS,kEAAqB,GAAG,gBAAgB,IAAI;AAChG,eAAe,OAAO,mDAAK,EAAE;AAC7B,0BAA0B,OAAO,mDAAK,EAAE;AACxC,gCAAgC,OAAO,mDAAK,EAAE;AAC9C;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,aAAa,6BAA6B;AAC1C,IAAI,gCAAgC;AACpC;AACA;AACA;AACA;AACA,uCAAuC,kEAAkE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,sEAAwB;AACpC;AACA;AACA,kCAAkC,OAAO,mDAAK,EAAE;AAChD;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAW;AAClC;AACA,iDAAiD,wDAAQ;AACzD;AACA;AACA;AACA,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,6BAA6B,OAAO,oDAAM,SAAS,uDAAS,IAAI;AACrE;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,kBAAkB,eAAe;AACjC;AACA,aAAa;AACb;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY,EAAE,0DAAa,eAAe,kEAAmB,EAAE,4FAAuB;AAChH;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,gJAAgJ,mBAAmB,oLAAoL,eAAe;AACtW,yCAAyC,qBAAqB,sBAAsB,YAAY,cAAc,2BAA2B,gBAAgB,uBAAuB,mBAAmB;AACnM,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,yDAAW,2BAA2B;AAC7D,gBAAgB,OAAO,yDAAW,6BAA6B;AAC/D,yBAAyB,OAAO,uDAAS,+BAA+B,eAAe,IAAI;AAC3F,iBAAiB,OAAO,uDAAS,SAAS,sDAAS,GAAG,eAAe,IAAI;AACzE,sBAAsB,OAAO,uDAAS,SAAS,8DAAiB,GAAG,gBAAgB,IAAI;AACvF;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,0BAA0B,4DAAY,EAAE,0DAAa;AACrD,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAE4a;AAC5a;;;;;;;;;;;;;AClqCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0K;AACzH;AACrB;AACiB;AACN;AACM;AACE;AACb;AACA;;AAElC;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,6CAA6C,gBAAgB,cAAc;AAC3E,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAc;AAC1B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY,gDAAgD,0CAA0C;AACtG,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qDAAqD,+BAA+B,SAAS,gCAAgC;AAC7H,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,SAAS;AACT,KAAK;AACL;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,MAAM,oBAAoB;AACvD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB;AACrD;AACA,sDAAsD,wEAAkB,EAAE,+CAA+C,+BAA+B,EAAE,+CAA+C;;AAEzM;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,8CAAK;AACzC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,8CAAK;AACpB;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC,OAAO,mDAAK,EAAE;AAC9C,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,4BAA4B,4DAAc;AAC1C,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,gBAAgB;AAC3B,WAAW,0BAA0B;AACrC,WAAW,cAAc;AACzB,WAAW,gBAAgB;AAC3B,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,mBAAmB,uDAAG;AACtB,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,yCAAyC;AACzC;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,6BAA6B,uDAAG,mEAAmE,iBAAiB;AACpH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,yFAAyF,EAAE,YAAY,WAAW,eAAe,EAAE;AACnI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,4BAA4B,GAAG;AACjF,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iCAAiC;AACvE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,0IAA0I,uBAAuB,iFAAiF,kCAAkC;AACpR,4CAA4C,aAAa,+BAA+B,OAAO,4CAA4C,aAAa,uBAAuB,0DAA0D,0BAA0B,yBAAyB,qDAAqD,0BAA0B,kBAAkB,uBAAuB,4BAA4B,yBAAyB,eAAe,0CAA0C,mBAAmB;AACrhB,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,sEAAwB,EAAE;AACtC,KAAK,sCAAsC;AAC3C,KAAK;AACL;AACA;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,wBAAwB,OAAO,uDAAS,8BAA8B,qBAAqB,8DAAgB,EAAE,IAAI;AACjH;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,8BAA8B,aAAa,iBAAiB,kBAAkB;AAC9E,aAAa;AACb;AACA;AACA;AACA,KAAK,sCAAsC;AAC3C,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,4YAA4Y,YAAY,2CAA2C,YAAY,skBAAskB,YAAY,2CAA2C,YAAY;AACxlC,2CAA2C,aAAa;AACxD,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,0DAAa,EAAE,4DAAY;AACrD;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,UAAU;AACV;AACA,+BAA+B,4DAAc;AAC7C;AACA;AACA,UAAU;AACV;AACA,4BAA4B,4DAAc;AAC1C;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA,6BAA6B,6DAA6D;AAC1F,aAAa;AACb;;AAEmuB;AACnuB;;;;;;;;;;;;;ACp2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgH;AACtE;AACH;AACF;AACa;;AAElD;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,gBAAgB;AAC/E,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,gBAAgB;AAChG,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc,EAAE,yBAAyB,EAAE,SAAS,EAAE,yBAAyB;AAC/G;AACA;AACA,2EAA2E,gBAAgB;AAC3F,gBAAgB;AAChB;AACA;AACA,gCAAgC,cAAc,UAAU,yBAAyB;AACjF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sCAAsC,GAAG,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAe,GAAG;AACpD;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAG;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,uCAAuC;AACzE;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,iBAAiB,oBAAoB;AACrC,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,iBAAiB,oBAAoB;AACrC,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB,oEAAoE;AACpE;AACA;AACA,4CAA4C,0DAAG;AAC/C,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,4CAA4C,0DAAG;AAC/C,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,4BAA4B,oDAAa;AACzC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,8BAA8B,4DAAc;;AAE5C;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAsD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,kDAAI;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,2BAA2B;AAChC,KAAK,OAAO,+DAAiB;AAC7B;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gCAAgC,OAAO,oDAAM,8BAA8B,GAAG;AAC3F,aAAa,wCAAwC,OAAO,sDAAQ,EAAE;AACtE;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB,uBAAuB,+DAAU;AACjC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,0CAA0C,EAAE,eAAe,EAAE;AAC7D,WAAW,EAAE;AACb,YAAY,EAAE;AACd;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,oDAAe;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GA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","file":"main-es2015.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, Input, Output, NgModule, ContentChild, TemplateRef, ViewChild, Directive, ViewContainerRef, ComponentFactoryResolver, Pipe, Inject, LOCALE_ID, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@vcd/i18n';\nimport { CommonModule, DecimalPipe, DatePipe } from '@angular/common';\nimport { ClarityModule, ClrDatagridFilter, ClrDatagrid, ClrDatagridPagination, ClrIfOpen, ClrTooltipContent } from '@clr/angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/csv-exporter.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nclass CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param {?} rows 2D array of data. First row is the names for the fields\n     * @return {?}\n     */\n    createCsv(rows) {\n        return rows.map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => processRow(row))).join('\\n');\n    }\n    /**\n     * Does a client side download\n     * @param {?} csvFile The string contents of a CSV file to be downloaded\n     * @param {?} filename The name of the file to be downloaded\n     * @return {?}\n     */\n    downloadCsvFile(csvFile, filename) {\n        /** @type {?} */\n        const mimeType = 'text/csv;charset=utf-8;';\n        /** @type {?} */\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            /** @type {?} */\n            const link = document.createElement('a');\n            /** @type {?} */\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\nCsvExporterService.decorators = [\n    { type: Injectable, args: [{\n                providedIn: 'root',\n            },] }\n];\n/** @nocollapse */ CsvExporterService.ngInjectableDef = ɵɵdefineInjectable({ factory: function CsvExporterService_Factory() { return new CsvExporterService(); }, token: CsvExporterService, providedIn: \"root\" });\n/**\n * Returns a string\n * @param {?} row A list of cells to be turned into a CSV string, separated by commas\n * @return {?}\n */\nfunction processRow(row) {\n    return row.map((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => encodeValue(cell))).join(',');\n}\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param {?} cellValue Cell cellValue to be encoded\n * @return {?}\n */\nfunction encodeValue(cellValue) {\n    /** @type {?} */\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    /** @type {?} */\n    let result = innerValue.replace(/\"/g, '\"\"');\n    // TODO: See https://jira.eng.vmware.com/browse/VDUCC-59\n    // result = escapeAgainstCsvInjection(result);\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/data-exporter.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\nclass DataExporterComponent {\n    /**\n     * @param {?} csvExporterService\n     */\n    constructor(csvExporterService) {\n        this.csvExporterService = csvExporterService;\n        /**\n         * List of columns that can be exported, user may deselect some before sending the download request\n         */\n        this.columns = [];\n        /**\n         * The name of the file to be downloaded\n         */\n        this.fileName = 'data-export.csv';\n        /**\n         * Whether a box to select/deselect all rows is available\n         */\n        this.showSelectAll = true;\n        this._open = false;\n        /**\n         * Fires when {\\@link _open} changes. Its parameter indicates the new state.\n         */\n        this.openChange = new EventEmitter();\n        /**\n         * Called when the export is ready to be created\n         */\n        this.dataExportRequest = new EventEmitter();\n        this._isRequestPending = false;\n        this._progress = 0;\n    }\n    /**\n     * Whether the dialog is open\n     * @param {?} value\n     * @return {?}\n     */\n    set open(value) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    /**\n     * @return {?}\n     */\n    get open() {\n        return this._open;\n    }\n    /**\n     * True between the time {\\@link dataExportRequest} fires and {\\@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     * @return {?}\n     */\n    get isRequestPending() {\n        return this._isRequestPending;\n    }\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     * @return {?}\n     */\n    get progress() {\n        return this._progress;\n    }\n    /**\n     * @return {?}\n     */\n    onClickExport() {\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.columns.filter((/**\n             * @param {?} col\n             * @return {?}\n             */\n            col => this.formGroup.controls[col.fieldName].value)),\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onClickCheckAll() {\n        for (const column of this.columns) {\n            this.formGroup.controls[column.fieldName].setValue(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isSelectAllEnabled() {\n        for (const column of this.columns) {\n            if (!this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    get isExportEnabled() {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const controls = this.columns.reduce((/**\n         * @param {?} previousValue\n         * @param {?} currentValue\n         * @return {?}\n         */\n        (previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }), {});\n        this.formGroup = new FormGroup(controls);\n    }\n    /**\n     * @private\n     * @param {?} records\n     * @return {?}\n     */\n    exportData(records) {\n        if (!this.open) {\n            return;\n        }\n        this.open = false;\n        this._isRequestPending = false;\n        /** @type {?} */\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map((/**\n             * @param {?} fieldName\n             * @return {?}\n             */\n            fieldName => this.getDisplayNameForField(fieldName))),\n            // Then the data\n            ...records.map((/**\n             * @param {?} rec\n             * @return {?}\n             */\n            rec => Object.keys(rec).map((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => rec[key])))),\n        ];\n        /** @type {?} */\n        const csvFile = this.csvExporterService.createCsv(rows);\n        this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n    }\n    /**\n     * @private\n     * @param {?} progress\n     * @return {?}\n     */\n    updateProgress(progress) {\n        this._progress = progress;\n    }\n    /**\n     * @private\n     * @param {?} fieldName\n     * @return {?}\n     */\n    getDisplayNameForField(fieldName) {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\nDataExporterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-data-exporter',\n                template: \"<clr-modal [clrModalOpen]=\\\"open\\\" (clrModalOpenChange)=\\\"openChange.emit($event)\\\" [clrModalSize]=\\\"'sm'\\\" #modal>\\n    <h3 class=\\\"modal-title\\\">{{ dialogHeader || ('data-exporter.title' | translate) }}</h3>\\n    <div class=\\\"modal-body\\\">\\n        <button\\n            *ngIf=\\\"showSelectAll\\\"\\n            class=\\\"btn btn-sm btn-link select-all\\\"\\n            type=\\\"button\\\"\\n            (click)=\\\"onClickCheckAll()\\\"\\n            [disabled]=\\\"!isSelectAllEnabled\\\"\\n        >\\n            {{ selectAllText || ('select.all' | translate) }}\\n        </button>\\n        <ul class=\\\"list-unstyled column-selection\\\" [formGroup]=\\\"formGroup\\\">\\n            <li *ngFor=\\\"let col of columns\\\">\\n                <clr-checkbox-wrapper>\\n                    <input type=\\\"checkbox\\\" clrCheckbox [formControlName]=\\\"col.fieldName\\\" />\\n                    <label>{{ col.displayName }}</label>\\n                </clr-checkbox-wrapper>\\n            </li>\\n        </ul>\\n        <div class=\\\"progress\\\" [ngClass]=\\\"{ loop: progress == -1, pending: isRequestPending }\\\">\\n            <progress max=\\\"100\\\" value=\\\"{{ progress * 100 }}\\\"></progress>\\n        </div>\\n    </div>\\n    <hr />\\n\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline cancel\\\" (click)=\\\"open = false\\\">\\n            {{ cancelText || ('cancel' | translate) }}\\n        </button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary export\\\" [disabled]=\\\"!isExportEnabled\\\" (click)=\\\"onClickExport()\\\">\\n            {{ exportText || ('export' | translate) }}\\n        </button>\\n    </div>\\n</clr-modal>\\n\",\n                styles: [\"div.progress{visibility:hidden}div.progress.pending{visibility:visible}button.select-all{margin:0;padding:0}\"]\n            }] }\n];\n/** @nocollapse */\nDataExporterComponent.ctorParameters = () => [\n    { type: CsvExporterService }\n];\nDataExporterComponent.propDecorators = {\n    columns: [{ type: Input }],\n    fileName: [{ type: Input }],\n    dialogHeader: [{ type: Input }],\n    cancelText: [{ type: Input }],\n    selectAllText: [{ type: Input }],\n    exportText: [{ type: Input }],\n    showSelectAll: [{ type: Input }],\n    open: [{ type: Input }],\n    openChange: [{ type: Output }],\n    dataExportRequest: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: data-exporter/data-exporter.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataExporterModule {\n}\nDataExporterModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [DataExporterComponent],\n                imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n                exports: [DataExporterComponent],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/interfaces/datagrid-column.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/** @enum {string} */\nconst GridColumnHideable = {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never: \"NEVER\",\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown: \"SHOWN\",\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden: \"HIDDEN\",\n};\n/** @enum {string} */\nconst GridColumnSortDirection = {\n    Asc: \"ASCENDING\",\n    Desc: \"DESCENDING\",\n    None: \"NONE\",\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/datagrid.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst GridSelectionType = {\n    /**\n     * For selecting multiple rows\n     */\n    Multi: \"MULTI\",\n    /**\n     * For selecting only one row at a time\n     */\n    Single: \"SINGLE\",\n    /**\n     * Disables the selection\n     */\n    None: \"NONE\",\n};\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n * <vcd-datagrid\n *    (onGridRefresh)=\"fetchData()\"\n *    [columns]=\"columns\"\n *    [gridData]=\"gridData\">\n *  </vcd-datagrid>\n *\n * @template R\n */\nclass DatagridComponent {\n    constructor() {\n        this.GridColumnHideable = GridColumnHideable;\n        this._selectionType = GridSelectionType.None;\n        /**\n         * The CSS class to use for the Clarity datagrid.\n         */\n        this.clrDatagridCssClass = '';\n        /**\n         * The text placed next to the pagination number dropdown.\n         */\n        this.paginationDropdownText = '';\n        /**\n         * The pagination information that the user should supply.\n         */\n        this.pagination = {\n            pageSize: 10,\n            pageSizeOptions: [10, 20, 50, 100],\n        };\n        /**\n         * Loading indicator on the grid\n         */\n        this.isLoading = false;\n        /**\n         * The value of the single selection.\n         */\n        this.singleSelected = undefined;\n        /**\n         * The value of the multi selection.\n         */\n        this.multiSelection = [];\n        /**\n         * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n         * {\\@link #GridState} is the type of value emitted\n         */\n        this.gridRefresh = new EventEmitter();\n        /**\n         * Returns an identifier for the given record at the given index.\n         *\n         * If the record has a href, defaults to that. Else, defaults to index.\n         */\n        this.trackBy = (/**\n         * @param {?} index\n         * @param {?} record\n         * @return {?}\n         */\n        (index, record) => {\n            return record && (record.href || index);\n            // tslint:disable-next-line: semicolon\n        });\n    }\n    /**\n     * Sets the configuration of columns on the grid and updates the {\\@link columnsConfig} array\n     * @param {?} cols\n     * @return {?}\n     */\n    set columns(cols) {\n        this._columns = cols;\n        this.getColumnsConfig();\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     * @param {?} result\n     * @return {?}\n     */\n    set gridData(result) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        this.updateSelectedItems();\n    }\n    /**\n     * Type of row selection on the grid\n     * @param {?} selectionType\n     * @return {?}\n     */\n    set selectionType(selectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n    /**\n     * Gives the correct string to display for the pagination.\n     *\n     * @param {?} firstItem the index of the first item displayed.\n     * @param {?} lastItem the index of the last item displayed.\n     * @param {?} totalItems the total number of items that could be displayed.\n     * @return {?}\n     */\n    paginationCallback(firstItem, lastItem, totalItems) {\n        return `${firstItem} - ${lastItem} of ${totalItems} rows`;\n    }\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     * @param {?} row\n     * @param {?} index\n     * @return {?}\n     */\n    clrDatarowCssClassGetter(row, index) {\n        return '';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateSelectedItems() {\n        if (this._selectionType === GridSelectionType.Single) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            /** @type {?} */\n            const found = this.items.find((/**\n             * @param {?} item\n             * @param {?} itemIndex\n             * @return {?}\n             */\n            (item, itemIndex) => this.trackBy(itemIndex, item) ===\n                this.trackBy(this.items.indexOf(this.datagrid.selection.currentSingle), this.datagrid.selection.currentSingle)));\n            if (!found) {\n                this.datagrid.selection.currentSingle = undefined;\n            }\n        }\n        else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                this.datagrid.selection.current = this.datagrid.selection.current.filter((/**\n                 * @param {?} selected\n                 * @param {?} selectedIndex\n                 * @return {?}\n                 */\n                (selected, selectedIndex) => {\n                    /** @type {?} */\n                    const found = this.items.find((/**\n                     * @param {?} item\n                     * @param {?} itemIndex\n                     * @return {?}\n                     */\n                    (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)));\n                    return found;\n                }));\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    clearSelectionInformation() {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        }\n        else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        }\n        else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n    /**\n     * Returns the items selected in the VCD datagrid.\n     * @return {?}\n     */\n    getDatagridSelection() {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n    /**\n     * Called when the {\\@param state} of the Clarity datagrid changes.\n     * @param {?} state\n     * @return {?}\n     */\n    gridStateChanged(state) {\n        // Update pagination information.\n        /** @type {?} */\n        const pagination = {\n            pageNumber: state.page ? state.page.current : 1,\n            itemsPerPage: state.page ? state.page.size : 10,\n        };\n        // Update the sorting information.\n        /** @type {?} */\n        const toEmit = {\n            pagination,\n        };\n        if (state.sort && typeof state.sort.by === 'string') {\n            toEmit.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n        this.gridRefresh.emit(toEmit);\n    }\n    /**\n     * Resets the pagination to page 1.\n     * @return {?}\n     */\n    resetToPageOne() {\n        this.paginationComponent.currentPage = 1;\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    isColumnHideable(column) {\n        return column && column.hideable && column.hideable !== GridColumnHideable.Never;\n    }\n    /**\n     * Says if the number of items matches the page size.\n     * @return {?}\n     */\n    sameItemsAsPageSize() {\n        return this.pagination.pageSize === this.items.length;\n    }\n    /**\n     * Updates the pagination data and makes the callback.\n     * @param {?} paginationData\n     * @return {?}\n     */\n    paginationCallbackWrapper(paginationData) {\n        return this.paginationCallback(paginationData.firstItem + 1, paginationData.lastItem + 1, this.totalItems);\n    }\n    /**\n     * Defines the {\\@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     * @private\n     * @return {?}\n     */\n    getColumnsConfig() {\n        this.columnsConfig = this.columns.map((/**\n         * @param {?} column\n         * @return {?}\n         */\n        column => {\n            /** @type {?} */\n            const columnConfig = Object.assign({}, column);\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = (/** @type {?} */ (column.renderer));\n            }\n            else if (((/** @type {?} */ (column.renderer))).config) {\n                columnConfig.fieldColumnRendererSpec = (/** @type {?} */ (column.renderer));\n            }\n            else {\n                columnConfig.fieldName = (/** @type {?} */ (column.renderer));\n            }\n            return columnConfig;\n        }));\n    }\n}\nDatagridComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-datagrid',\n                template: \"<clr-datagrid [clrDgLoading]=\\\"isLoading\\\" [ngClass]=\\\"this.clrDatagridCssClass\\\" (clrDgRefresh)=\\\"gridStateChanged($event)\\\">\\n    <clr-dg-column\\n        *ngFor=\\\"let column of columnsConfig\\\"\\n        [clrDgField]=\\\"column.queryFieldName\\\"\\n        (clrDgSortOrderChange)=\\\"resetToPageOne()\\\"\\n    >\\n        <ng-container *ngIf=\\\"isColumnHideable(column); else notHideable\\\">\\n            <ng-container *clrDgHideableColumn=\\\"{ hidden: column.hideable === GridColumnHideable.Hidden }\\\">{{\\n                column.displayName\\n            }}</ng-container>\\n        </ng-container>\\n        <ng-template #notHideable>{{ column.displayName }}</ng-template>\\n    </clr-dg-column>\\n\\n    <clr-dg-row\\n        *ngFor=\\\"let restItem of items; let i = index\\\"\\n        [ngForTrackBy]=\\\"trackBy\\\"\\n        [ngClass]=\\\"this.clrDatarowCssClassGetter(restItem, i)\\\"\\n        [clrDgItem]=\\\"restItem\\\"\\n    >\\n        <clr-dg-cell *ngFor=\\\"let column of columnsConfig\\\">\\n            <!-- Default renderer -->\\n            <ng-container *ngIf=\\\"column.fieldName\\\">{{ restItem | nestedProperty: column.fieldName }}</ng-container>\\n\\n            <!-- Renderer is a function -->\\n            <ng-container *ngIf=\\\"column.fieldRenderer\\\">{{\\n                restItem | functionRenderer: column.fieldRenderer\\n            }}</ng-container>\\n\\n            <!-- Renderer is a componentRenderer -->\\n            <ng-template\\n                *ngIf=\\\"column.fieldColumnRendererSpec\\\"\\n                [vcdComponentRendererOutlet]=\\\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\\\"\\n            >\\n            </ng-template>\\n        </clr-dg-cell>\\n        <ng-container ngProjectAs=\\\"clr-dg-row-detail\\\" *ngIf=\\\"detailTemplate !== undefined\\\">\\n            <clr-dg-row-detail *clrIfExpanded>\\n                <ng-content *ngTemplateOutlet=\\\"detailTemplate; context: { record: restItem }\\\"> </ng-content>\\n            </clr-dg-row-detail>\\n        </ng-container>\\n    </clr-dg-row>\\n    <clr-dg-row *ngIf=\\\"sameItemsAsPageSize()\\\"> </clr-dg-row>\\n\\n    <clr-dg-footer>\\n        <clr-dg-pagination #paginationData [clrDgTotalItems]=\\\"totalItems\\\" [(clrDgPageSize)]=\\\"this.pagination.pageSize\\\">\\n            <clr-dg-page-size [clrPageSizeOptions]=\\\"this.pagination.pageSizeOptions\\\">{{\\n                paginationDropdownText\\n            }}</clr-dg-page-size>\\n            {{ paginationCallbackWrapper(paginationData) }}\\n        </clr-dg-pagination>\\n    </clr-dg-footer>\\n</clr-datagrid>\\n\"\n            }] }\n];\nDatagridComponent.propDecorators = {\n    columns: [{ type: Input }],\n    gridData: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    detailTemplate: [{ type: ContentChild, args: [TemplateRef, { static: false },] }],\n    clrDatagridCssClass: [{ type: Input }],\n    paginationDropdownText: [{ type: Input }],\n    pagination: [{ type: Input }],\n    gridRefresh: [{ type: Output }],\n    numericFilter: [{ type: ViewChild, args: [ClrDatagridFilter, { static: false },] }],\n    datagrid: [{ type: ViewChild, args: [ClrDatagrid, { static: true },] }],\n    paginationComponent: [{ type: ViewChild, args: [ClrDatagridPagination, { static: false },] }],\n    trackBy: [{ type: Input }],\n    paginationCallback: [{ type: Input }],\n    clrDatarowCssClassGetter: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/directives/component-renderer-outlet.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {\\@link ComponentRendererSpec} as input and also 'context' as input that serves as argument for\n * {\\@link ComponentRenderer.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * <ng-template\n *      [vcdComponentRendererOutlet]=\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\"\n * ></ng-template>\n *\n * @template R, T\n */\nclass ComponentRendererOutletDirective {\n    /**\n     * @param {?} viewContainerRef\n     * @param {?} cfr\n     */\n    constructor(viewContainerRef, cfr) {\n        this.viewContainerRef = viewContainerRef;\n        this.cfr = cfr;\n    }\n    /**\n     * @param {?} renderer\n     * @return {?}\n     */\n    set vcdComponentRendererOutlet(renderer) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n    /**\n     * Attaches the passed component type to the view of this directive host\n     * @private\n     * @return {?}\n     */\n    attachRenderer() {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        /** @type {?} */\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n    /**\n     * Updates the configuration of instantiated component\n     * @private\n     * @param {?} config\n     * @param {?} context\n     * @return {?}\n     */\n    assignValue(config, context) {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    detachRenderer() {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\nComponentRendererOutletDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[vcdComponentRendererOutlet]',\n            },] }\n];\n/** @nocollapse */\nComponentRendererOutletDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver }\n];\nComponentRendererOutletDirective.propDecorators = {\n    vcdComponentRendererOutlet: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: common/pipes/nested-property.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst OBJECT_PROPERTY_SEPARATOR = '.';\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\nclass NestedPropertyPipe {\n    /**\n     * @param {?} localeId\n     */\n    constructor(localeId) {\n        this.localeId = localeId;\n    }\n    /**\n     * @template T\n     * @param {?} item\n     * @param {?} property\n     * @return {?}\n     */\n    transform(item, property) {\n        if (!item || !property) {\n            return null;\n        }\n        /** @type {?} */\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        /** @type {?} */\n        let returnValue;\n        if (splitProperty.length > 1) {\n            /** @type {?} */\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        }\n        else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\nNestedPropertyPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'nestedProperty',\n                pure: true,\n            },] }\n];\n/** @nocollapse */\nNestedPropertyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value == null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: common/pipes/pipes.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations = [NestedPropertyPipe];\nclass PipesModule {\n}\nPipesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations,\n                exports: [...declarations],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/pipes/function-renderer.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\nclass FunctionRendererPipe {\n    /**\n     * @param {?} item\n     * @param {?} renderer\n     * @return {?}\n     */\n    transform(item, renderer) {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\nFunctionRendererPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'functionRenderer',\n                pure: true,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/renderers/bold-text-renderer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A {\\@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * \\@example Example usage with RendererSpec:\n *     columns: GridColumn<MockRecord>[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\nclass BoldTextRendererComponent {\n}\nBoldTextRendererComponent.decorators = [\n    { type: Component, args: [{\n                template: `\n        <strong>{{ config.text }}</strong>\n    `\n            }] }\n];\nBoldTextRendererComponent.propDecorators = {\n    config: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/datagrid.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst directives = [DatagridComponent, ComponentRendererOutletDirective];\n/** @type {?} */\nconst pipes = [FunctionRendererPipe];\n/** @type {?} */\nconst renderers = [BoldTextRendererComponent];\nclass DatagridModule {\n}\nDatagridModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ClarityModule, PipesModule, ReactiveFormsModule, BrowserAnimationsModule],\n                declarations: [...directives, ...renderers, ...pipes],\n                providers: [],\n                exports: [DatagridComponent, ...renderers],\n                entryComponents: [...renderers],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: datagrid/interfaces/component-renderer.interface.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility function to enforce type safety on output of the config function. The output is used as value context\n * inside ComponentRenderer's template\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: RendererSpec<SomeRecord, IconRendererConfiguration>(IconComponentRendererCtor, (r: SomeRecord) => v)\n * }\n *\n * In the above example, this method helps in making sure that the value \"v\" returned by the config function is of\n * IconRendererConfiguration type\n * @template R, C\n * @param {?} componentRendererSpec\n * @return {?}\n */\nfunction RendererSpec(componentRendererSpec) {\n    return componentRendererSpec;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: cliptext/cliptext.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst Position = {\n    TOP: \"TOP\",\n    BOTTOM: \"BOTTOM\",\n    BEFORE: \"BEFORE\",\n    AFTER: \"AFTER\",\n};\n/**\n * Use a cliptext component when you need to restrict a displayed text to a certain width but still provide to the user\n * the ability to see the full text if it is clipped along with a hint that clipping has taken place. Accessibility\n * should be taken into account.\n *\n * Example: a datagrid with a cell that contains text that cannot fit in one line. The solution is to wrap the content\n * on multiple lines or show as much text as it can fit in one line, showing ellipses ('...') at the end to denote that\n * there is still more content and on hover over to display the full content.\n *\n * The current implementation is based on clarity tooltip component, where the tooltip is available only\n * if clipping has occurred.\n */\nclass CliptextComponent {\n    /**\n     * @param {?} changeDetector\n     */\n    constructor(changeDetector) {\n        this.changeDetector = changeDetector;\n        this._inline = false;\n        this._size = 'md';\n        this._tooltipPosition = 'top-right';\n    }\n    /**\n     * Setting the position should be avoided as much as possible and considered ONLY in extremely corner case.\n     * Some of the reasons to avoid it are:\n     *  - Clarity will introduce smart positioning '[NG] Smart Popover Component #2923'\n     *  - Future versions may go with different implementation so position may become irrelevant\n     * @param {?} position\n     * @return {?}\n     */\n    set position(position) {\n        switch (position) {\n            // Since we use only LTR languages, the mapping is:\n            // BEFORE->left, AFTER->right, default->'top-right'\n            // If we introduce RTL languages the mapping should be:\n            // BEFORE->right, AFTER->left, default->'top-left'\n            case Position.TOP:\n                this._tooltipPosition = 'top-right';\n                break;\n            case Position.BOTTOM:\n                this._tooltipPosition = 'bottom-right';\n                break;\n            case Position.BEFORE:\n                this._tooltipPosition = 'left';\n                break;\n            case Position.AFTER:\n                this._tooltipPosition = 'right';\n                break;\n            default:\n                this._tooltipPosition = 'top-right';\n        }\n    }\n    /**\n     * Whether the tooltip should take up a block, or be inline within text\n     *\n     * If its value is falsy (default), it will be displayed as a block (take up the parent's width).\n     * Otherwise, it should be a CSS string to be used as its max-width;\n     * @param {?} width\n     * @return {?}\n     */\n    set inlineWidth(width) {\n        this._inline = width;\n    }\n    /**\n     * @return {?}\n     */\n    get isInline() {\n        return !!this._inline;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this._inline || '';\n    }\n    /**\n     * Same as Clarity tooltip sizes (xs, sm, md, lg) but currently only the default one (md) is used\n     * @return {?}\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * @return {?}\n     */\n    get tooltipPosition() {\n        return this._tooltipPosition;\n    }\n    /**\n     * @return {?}\n     */\n    get tooltipText() {\n        return this._tooltipText;\n    }\n    /**\n     * @param {?} tooltipContent\n     * @return {?}\n     */\n    set tooltipContent(tooltipContent) {\n        if (!tooltipContent) {\n            return;\n        }\n        if (!this.isOverflowing()) {\n            this.clrIfOpen.open = false;\n        }\n        else {\n            // Check if the tooltip text has changed\n            /** @type {?} */\n            const tooltipText = this.cliptextContainer.nativeElement.textContent;\n            if (this._tooltipText !== tooltipText) {\n                this._tooltipText = tooltipText;\n                // Re-trigger open so that clarity tooltip is positioned correctly\n                this.clrIfOpen.open = false;\n                this.clrIfOpen.open = true;\n                this.changeDetector.detectChanges();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._tooltipText = this.cliptextContainer.nativeElement.textContent;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    isOverflowing() {\n        return isTextOverflowing(this.cliptextContainer.nativeElement);\n        // Text overflows when the content element's width is less than its scrollWidth.\n        /**\n         * @param {?} el\n         * @return {?}\n         */\n        function isTextOverflowing(el) {\n            return Math.ceil(el.getBoundingClientRect().width) < el.scrollWidth;\n        }\n    }\n}\nCliptextComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-cliptext',\n                template: \"<clr-tooltip>\\n    <div #cliptextContainer clrTooltipTrigger class=\\\"cliptext-container text-truncate\\\" [ngClass]=\\\"{ inline: isInline }\\\">\\n        <ng-content></ng-content>\\n    </div>\\n    <clr-tooltip-content aria-hidden=\\\"true\\\" *clrIfOpen [clrPosition]=\\\"tooltipPosition\\\" [clrSize]=\\\"size\\\">\\n        <span>{{ tooltipText }}</span>\\n    </clr-tooltip-content>\\n</clr-tooltip>\\n\",\n                styles: [\":host(.inline){display:inline-block;vertical-align:middle}clr-tooltip{display:block}clr-tooltip .text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\"]\n            }] }\n];\n/** @nocollapse */\nCliptextComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nCliptextComponent.propDecorators = {\n    position: [{ type: Input }],\n    inlineWidth: [{ type: Input }],\n    isInline: [{ type: HostBinding, args: ['class.inline',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth',] }],\n    cliptextContainer: [{ type: ViewChild, args: ['cliptextContainer', { static: true },] }],\n    clrIfOpen: [{ type: ViewChild, args: [ClrIfOpen, { static: true },] }],\n    tooltipContent: [{ type: ViewChild, args: [ClrTooltipContent, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: cliptext/cliptext.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CliptextModule {\n}\nCliptextModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CliptextComponent],\n                exports: [CliptextComponent],\n                imports: [CommonModule, ClarityModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: components.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentsModule {\n}\nComponentsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [DataExporterModule, DatagridModule, CliptextModule],\n                exports: [DataExporterModule, DatagridModule, CliptextModule],\n            },] }\n];\n\nexport { BoldTextRendererComponent, CliptextComponent, CliptextModule, ComponentsModule, DataExporterComponent, DataExporterModule, DatagridComponent, DatagridModule, GridColumnHideable, GridColumnSortDirection, GridSelectionType, Position, RendererSpec, CsvExporterService as ɵa, PipesModule as ɵb, NestedPropertyPipe as ɵc, ComponentRendererOutletDirective as ɵd, BoldTextRendererComponent as ɵe, FunctionRendererPipe as ɵf };\n//# sourceMappingURL=vcd-ui-components.js.map\n","import { Component, Injectable, ɵɵdefineInjectable, Input, NgModule, InjectionToken, Inject, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-scss';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport sdk from '@stackblitz/sdk';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-retriever.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service exposing methods for retrieving the documentation for a given component.\n * @abstract\n */\nclass DocumentationRetrieverService {\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-container/documentation-container.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DocumentationContainerComponent {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.route.data.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        (data) => {\n            this.documentationEntry = data.documentationEntry;\n        }));\n    }\n}\nDocumentationContainerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-documentation-container',\n                template: \"<clr-tabs>\\n    <clr-tab>\\n        <button clrTabLink>Documentation</button>\\n        <clr-tab-content>\\n            <vcd-overview-viewer [component]=\\\"documentationEntry?.component\\\"> </vcd-overview-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>API</button>\\n        <clr-tab-content>\\n            <vcd-api-viewer [component]=\\\"documentationEntry?.component\\\"> </vcd-api-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>Examples</button>\\n        <clr-tab-content>\\n            <vcd-example-viewer\\n                *ngFor=\\\"let exampleDescriptor of documentationEntry?.examples\\\"\\n                [exampleEntry]=\\\"exampleDescriptor\\\"\\n            >\\n            </vcd-example-viewer>\\n        </clr-tab-content>\\n    </clr-tab>\\n</clr-tabs>\\n\",\n                styles: [\"vcd-example-viewer{margin-top:1rem;display:block}\"]\n            }] }\n];\n/** @nocollapse */\nDocumentationContainerComponent.ctorParameters = () => [\n    { type: ActivatedRoute }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To register a documentation entry as value for corresponding component\n * @type {?}\n */\nconst documentationEntryMap = new Map();\n/**\n * Used in {\\@link Documentation.registerDocumentationEntry} method to check if the input is a valid {\\@link DocumentationEntry}\n * @param {?} documentationParams\n * @return {?}\n */\nfunction validateDocumentationMetadata(documentationParams) {\n    if (!documentationParams.urlSegment) {\n        throw new Error('urlSegment should be specified and not empty');\n    }\n    /** @type {?} */\n    const documentationEntry = Documentation.getAllEntries().find((/**\n     * @param {?} entry\n     * @return {?}\n     */\n    entry => entry.urlSegment === documentationParams.urlSegment));\n    if (documentationEntry) {\n        throw new Error(`The specified urlSegment '${documentationParams.urlSegment}' for '${documentationParams.displayName}'` +\n            `was already defined for '${documentationEntry.displayName}'`);\n    }\n    if (!documentationParams.displayName) {\n        throw new Error('displayName should be specified and not empty');\n    }\n}\n/** @type {?} */\nconst Documentation = {\n    /**\n     * Returns all the documentation entries registered into the framework\n     * @return {?}\n     */\n    getAllEntries() {\n        return Array.from(documentationEntryMap.values());\n    },\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     * @return {?}\n     */\n    getRoutes() {\n        return Documentation.getAllEntries().map((/**\n         * @param {?} documentationEntry\n         * @return {?}\n         */\n        (documentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        })));\n    },\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     * @param {?} documentationEntry\n     * @return {?}\n     */\n    registerDocumentationEntry(documentationEntry) {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: compodoc/compodoc-retriever.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/**\n * This service retrieves specific properties from compodoc generated documentation\n */\nclass CompoDocRetrieverService {\n    /**\n     * @param {?} documentationJson\n     */\n    constructor(documentationJson) {\n        this.documentationJson = documentationJson;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getOverview(component) {\n        return this.getComponent(component).description;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getTypescriptSourceCode(component) {\n        return this.getComponent(component).sourceCode;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getHtmlSourceCode(component) {\n        return this.getComponent(component).templateData;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getCssSourceCode(component) {\n        /** @type {?} */\n        const styleUrlsData = this.getComponent(component).styleUrlsData;\n        if (!styleUrlsData) {\n            return;\n        }\n        return styleUrlsData.map((/**\n         * @param {?} styleUrl\n         * @return {?}\n         */\n        styleUrl => styleUrl.data)).join('\\n\\n\\n');\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getComponent(component) {\n        for (const documentationJson of this.documentationJson) {\n            /** @type {?} */\n            const compodocComponent = documentationJson.components.find((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => c.name === component.name));\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return (/** @type {?} */ ({ styleUrlsData: [] }));\n    }\n    /**\n     * @param {?} moduleName\n     * @return {?}\n     */\n    getModule(moduleName) {\n        for (const documentationJson of this.documentationJson) {\n            /** @type {?} */\n            const compodocComponent = documentationJson.modules.find((/**\n             * @param {?} module\n             * @return {?}\n             */\n            module => module.name === moduleName));\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return null;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getInputParameters(component) {\n        /** @type {?} */\n        const comp = this.getComponent(component);\n        return comp.inputsClass || [];\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    getOutputParameters(component) {\n        /** @type {?} */\n        const comp = this.getComponent(component);\n        return comp.outputsClass || [];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight/highlight.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass HighlightService {\n}\nHighlightService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ HighlightService.ngInjectableDef = ɵɵdefineInjectable({ factory: function HighlightService_Factory() { return new HighlightService(); }, token: HighlightService, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * Generated from: highlight/prism/prism-highlight.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PrismHighlightService extends HighlightService {\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightTypescript(code) {\n        return this.highlight(code, Prism.languages.typescript);\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightHtml(code) {\n        return this.highlight(code, Prism.languages.html);\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    highlightScss(code) {\n        return this.highlight(code, Prism.languages.scss);\n    }\n    /**\n     * @private\n     * @param {?} code\n     * @param {?} lang\n     * @return {?}\n     */\n    highlight(code, lang) {\n        return Prism.highlight(code || '', lang);\n    }\n}\nPrismHighlightService.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: overview-viewer/overview-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverviewViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     */\n    constructor(documentationRetriever) {\n        this.documentationRetriever = documentationRetriever;\n        this.isNoOverviewMessageShown = true;\n    }\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.overview =\n            this.documentationRetriever.getOverview(component) ||\n                (this.isNoOverviewMessageShown ? 'No Documentation found' : '');\n    }\n}\nOverviewViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-overview-viewer',\n                template: \"<div [innerHTML]=\\\"overview\\\"></div>\\n\",\n                styles: [\"\"]\n            }] }\n];\n/** @nocollapse */\nOverviewViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService }\n];\nOverviewViewerComponent.propDecorators = {\n    isNoOverviewMessageShown: [{ type: Input }],\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: overview-viewer/overview-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations = [OverviewViewerComponent];\nclass OverviewViewerModule {\n}\nOverviewViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations],\n                exports: [...declarations],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: stack-blitz-writer.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst STACKBLITZ_INFO = new InjectionToken('StackBlitz Template information');\n/** @type {?} */\nconst APP_MODULE = 'src/app/app.module.ts';\n/** @type {?} */\nconst APP_COMPONENT_HTML = 'src/app/app.component.html';\n/**\n *\n * Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\n * to app.component.html and its module to app.module.ts\n *\n * import { NgModule } from \"\\@angular/core\";\n * import { BrowserModule } from \"\\@angular/platform-browser\";\n * import { BrowserAnimationsModule } from \"\\@angular/platform-browser/animations\";\n * import { FormsModule } from \"\\@angular/forms\";\n * import { ClarityModule } from \"\\@clr/angular\";\n * import { AppComponent } from \"./app.component\";\n * //__EXAMPLE_MODULE_IMPORT_LINE;\n *\n * \\@NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ClarityModule,\n *     FormsModule,\n *     //__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n *   ],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\nclass StackBlitzWriterService {\n    /**\n     * @param {?} stackBlitzInfo\n     * @param {?} docRetriever\n     */\n    constructor(stackBlitzInfo, docRetriever) {\n        this.stackBlitzInfo = stackBlitzInfo;\n        this.docRetriever = docRetriever;\n        this.template = null;\n        this.fetchSbTemplate();\n    }\n    /**\n     * @param {?} entry The example to be displayed in StackBlitz\n     * @return {?}\n     */\n    openStackBlitz(entry) {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** @type {?} */\n            const exampleComponent = this.docRetriever.getComponent(entry.component);\n            /** @type {?} */\n            let exampleModule;\n            if (this.stackBlitzInfo.moduleFinder) {\n                /** @type {?} */\n                const moduleName = this.stackBlitzInfo.moduleFinder(exampleComponent.name);\n                exampleModule = this.docRetriever.getModule(moduleName);\n            }\n            const [templateFiles, dependencies] = yield this.fetchSbTemplate();\n            const [mergedFiles, openFile] = this.createPatch(templateFiles, exampleComponent, exampleModule);\n            /** @type {?} */\n            const project = {\n                title: this.stackBlitzInfo.projectName,\n                description: entry.title,\n                template: 'angular-cli',\n                dependencies,\n                files: mergedFiles,\n            };\n            /** @type {?} */\n            const openOptions = {\n                openFile,\n                newWindow: true,\n            };\n            return sdk.openProject(project, openOptions);\n        });\n    }\n    /**\n     * @private\n     * @param {?} templateFs\n     * @param {?} exampleComponent\n     * @param {?=} module\n     * @return {?}\n     */\n    createPatch(templateFs, exampleComponent, module) {\n        /** @type {?} */\n        const componentTsFile = this.getFileName(exampleComponent.file);\n        /** @type {?} */\n        const changedFiles = {\n            [APP_MODULE]: this.mergeAppModule(module, templateFs),\n            [APP_COMPONENT_HTML]: this.mergeAppHtml(exampleComponent, templateFs),\n            [componentTsFile]: exampleComponent.sourceCode,\n            [this.getFileName(module.path)]: module.sourceCode,\n        };\n        /** @type {?} */\n        let defaultFile = componentTsFile;\n        if (exampleComponent.templateUrl && exampleComponent.templateUrl.length > 0) {\n            /** @type {?} */\n            const fileName = removeLeadingDotSlash(exampleComponent.templateUrl[0]);\n            /** @type {?} */\n            const htmlFile = this.getFileName(fileName);\n            changedFiles[htmlFile] = exampleComponent.templateData;\n            // If HTML is provided, use that as the default file\n            defaultFile = htmlFile;\n        }\n        if (exampleComponent.styleUrlsData && exampleComponent.styleUrlsData.length > 0) {\n            /** @type {?} */\n            const styleData = exampleComponent.styleUrlsData[0];\n            /** @type {?} */\n            const fileName = removeLeadingDotSlash(styleData.styleUrl);\n            changedFiles[this.getFileName(fileName)] = styleData.data;\n        }\n        /** @type {?} */\n        const mergedFs = Object.assign({}, templateFs, changedFiles);\n        return [mergedFs, defaultFile];\n        /**\n         * @param {?} fileName a fileName path that may start with ./\n         * @return {?} A filename, without ./ in the front\n         */\n        function removeLeadingDotSlash(fileName) {\n            if (fileName.startsWith('./')) {\n                fileName = fileName.slice(2);\n            }\n            return fileName;\n        }\n    }\n    /**\n     * Fetches an existing Stackblitz's files and dependencies by embedding it on the page and removing it when finished.\n     * The result is cached for future calls.\n     * @private\n     * @return {?}\n     */\n    fetchSbTemplate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.template) {\n                return Promise.resolve(this.template);\n            }\n            // StackBlitz's API replaces the DOM node you give it, so we need an extra node\n            // so we can remove the created iFRAME\n            /** @type {?} */\n            const iframeContainer = document.createElement('div');\n            /** @type {?} */\n            const iframeContainerParent = document.createElement('div');\n            iframeContainerParent.appendChild(iframeContainer);\n            iframeContainerParent.style.visibility = 'hidden';\n            iframeContainerParent.style.position = 'absolute';\n            document.body.appendChild(iframeContainerParent);\n            /** @type {?} */\n            const vm = yield sdk.embedProjectId(iframeContainer, this.stackBlitzInfo.projectName, { view: 'editor' });\n            this.template = [yield vm.getFsSnapshot(), yield vm.getDependencies()];\n            document.body.removeChild(iframeContainerParent);\n            return Promise.resolve(this.template);\n        });\n    }\n    /**\n     * Returns just the filename part of a path prefixed by 'src/app/'\n     * @private\n     * @param {?} path Path to be shortened to just its filename and put under src/app\n     * @param {?=} prefix A new path to be inserted before the filename\n     * @return {?}\n     */\n    getFileName(path, prefix = 'src/app/') {\n        return prefix + path.slice(path.lastIndexOf('/') + 1);\n    }\n    /**\n     * @private\n     * @param {?} module\n     * @param {?} fileSystem\n     * @return {?}\n     */\n    mergeAppModule(module, fileSystem) {\n        /** @type {?} */\n        const moduleFileName = this.getFileName(module.path, '').replace(/\\.ts$/, '');\n        /** @type {?} */\n        const moduleName = module.name;\n        return fileSystem[APP_MODULE].replace('//__EXAMPLE_MODULE_IMPORT_LINE', `import {${moduleName}} from \"./${moduleFileName}\";`).replace('//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY', moduleName);\n    }\n    /**\n     * @private\n     * @param {?} component\n     * @param {?} fileSystem\n     * @return {?}\n     */\n    mergeAppHtml(component, fileSystem) {\n        /** @type {?} */\n        const tag = '<x></x>'.replace(/x/g, component.selector);\n        return fileSystem[APP_COMPONENT_HTML].replace(/__EXAMPLE_TAG/, tag);\n    }\n}\n/** @nocollapse */\nStackBlitzWriterService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [STACKBLITZ_INFO,] }] },\n    { type: DocumentationRetrieverService }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: example-viewer/example-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ExampleViewerComponent {\n    /**\n     * @param {?} resolver\n     * @param {?} docRetriever\n     * @param {?} stackblitzWriter\n     */\n    constructor(resolver, docRetriever, stackblitzWriter) {\n        this.resolver = resolver;\n        this.docRetriever = docRetriever;\n        this.stackblitzWriter = stackblitzWriter;\n        /**\n         * For showing and hiding of {\\@link SourceCodeViewerComponent} in the HTML\n         */\n        this.showSourceCode = false;\n    }\n    /**\n     * @param {?} exampleEntry\n     * @return {?}\n     */\n    set exampleEntry(exampleEntry) {\n        this._exampleEntry = exampleEntry;\n        this.createExample();\n    }\n    /**\n     * @return {?}\n     */\n    get exampleEntry() {\n        return this._exampleEntry;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createExample() {\n        this.exampleContainer.clear();\n        /** @type {?} */\n        const exampleEntry = this.exampleEntry;\n        if (!exampleEntry || !exampleEntry.component) {\n            return;\n        }\n        /** @type {?} */\n        const factory = this.resolver.resolveComponentFactory(exampleEntry.component);\n        this.exampleContainer.createComponent(factory);\n    }\n    /**\n     * @return {?}\n     */\n    onCodeButtonClick() {\n        this.showSourceCode = !this.showSourceCode;\n    }\n    /**\n     * @return {?}\n     */\n    onRunButtonClick() {\n        this.stackblitzWriter.openStackBlitz(this.exampleEntry);\n    }\n}\nExampleViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-example-viewer',\n                template: \"<div class=\\\"card\\\">\\n    <div class=\\\"card-header-main\\\">\\n        <div class=\\\"card-header\\\">\\n            {{ exampleEntry?.title }}\\n        </div>\\n\\n        <div class=\\\"example-button-container\\\" [ngClass]=\\\"{ 'example-shown': showSourceCode }\\\">\\n            <clr-icon shape=\\\"play\\\" size=\\\"32\\\" class=\\\"is-solid\\\" (click)=\\\"onRunButtonClick()\\\"></clr-icon>\\n            <clr-icon shape=\\\"code\\\" size=\\\"32\\\" (click)=\\\"onCodeButtonClick()\\\"> </clr-icon>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"card-block source-code-container\\\" *ngIf=\\\"showSourceCode\\\">\\n        <vcd-source-code-viewer [component]=\\\"exampleEntry?.component\\\"> </vcd-source-code-viewer>\\n    </div>\\n    <div class=\\\"card-block\\\">\\n        <div class=\\\"card-text\\\">\\n            <vcd-overview-viewer\\n                [isNoOverviewMessageShown]=\\\"false\\\"\\n                [component]=\\\"exampleEntry?.component\\\"\\n            ></vcd-overview-viewer>\\n            <template #exampleContainer> </template>\\n        </div>\\n    </div>\\n</div>\\n\",\n                styles: [\".card-header-main{display:flex}.card-header-main .card-header{flex:1}.card-header-main .example-button-container{display:flex;margin:.5rem .5rem 0 0}.card-header-main .example-button-container.example-shown{border-radius:3px 3px 0 0;background-color:#d8e3e9}.card-header-main .example-button-container clr-icon{-ms-grid-row-align:center;align-self:center}.source-code-container{border-radius:3px 0 3px 3px;background-color:#d8e3e9;margin:0 .5rem}:host ::ng-deep vcd-overview-viewer>div>p{margin-bottom:10px}\"]\n            }] }\n];\n/** @nocollapse */\nExampleViewerComponent.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: DocumentationRetrieverService },\n    { type: StackBlitzWriterService }\n];\nExampleViewerComponent.propDecorators = {\n    exampleEntry: [{ type: Input }],\n    exampleContainer: [{ type: ViewChild, args: ['exampleContainer', { static: true, read: ViewContainerRef },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: source-code-viewer/source-code-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To display the 3 code parts(TypeScript, HTML and CSS) of a component\n */\nclass SourceCodeViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     * @param {?} highlightService\n     */\n    constructor(documentationRetriever, highlightService) {\n        this.documentationRetriever = documentationRetriever;\n        this.highlightService = highlightService;\n    }\n    /**\n     * The component which source (typescript, html, css) will be displayed\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.typescriptSourceCode = this.highlightService.highlightTypescript(this.documentationRetriever.getTypescriptSourceCode(component));\n        this.htmlSourceCode = this.highlightService.highlightHtml(this.documentationRetriever.getHtmlSourceCode(component) || 'No html found');\n        this.cssSourceCode = this.highlightService.highlightScss(this.documentationRetriever.getCssSourceCode(component) || 'No CSS found');\n    }\n}\nSourceCodeViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'vcd-source-code-viewer',\n                template: \"<clr-tabs>\\n    <clr-tab>\\n        <button clrTabLink>Typescript</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-ts\\\"><code [innerHTML]=\\\"typescriptSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>HTML</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-html\\\"><code [innerHTML]=\\\"htmlSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n\\n    <clr-tab>\\n        <button clrTabLink>CSS</button>\\n        <clr-tab-content>\\n            <pre class=\\\"language-scss\\\"><code [innerHTML]=\\\"cssSourceCode\\\"></code></pre>\\n        </clr-tab-content>\\n    </clr-tab>\\n</clr-tabs>\\n\",\n                styles: [\"pre{height:15rem;max-height:15rem;border-radius:3px}\"]\n            }] }\n];\n/** @nocollapse */\nSourceCodeViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService },\n    { type: HighlightService }\n];\nSourceCodeViewerComponent.propDecorators = {\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: source-code-viewer/source-code-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$1 = [SourceCodeViewerComponent];\nclass SourceCodeViewerModule {\n}\nSourceCodeViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations$1],\n                exports: [...declarations$1],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: example-viewer/example-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$2 = [ExampleViewerComponent];\nclass ExampleViewerModule {\n}\nExampleViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule, SourceCodeViewerModule, OverviewViewerModule],\n                declarations: [...declarations$2],\n                exports: [...declarations$2],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: api-viewer/api-viewer.component.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ApiViewerComponent {\n    /**\n     * @param {?} documentationRetriever\n     */\n    constructor(documentationRetriever) {\n        this.documentationRetriever = documentationRetriever;\n    }\n    /**\n     * Gets the input and output parameters from the Compodoc generated documentation json\n     * @param {?} component\n     * @return {?}\n     */\n    set component(component) {\n        if (!component) {\n            return;\n        }\n        this.inputParameters = this.documentationRetriever.getInputParameters(component);\n        this.outputParameters = this.documentationRetriever.getOutputParameters(component);\n    }\n}\nApiViewerComponent.decorators = [\n    { type: Component, args: [{\n                selector: ' vcd-api-viewer',\n                template: \"<h6>Inputs</h6>\\n<table class=\\\"table\\\" *ngIf=\\\"inputParameters?.length\\\">\\n    <thead>\\n        <tr>\\n            <th class=\\\"left\\\">Name</th>\\n            <th>Type</th>\\n            <th class=\\\"left\\\">Description</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let par of inputParameters\\\">\\n            <td class=\\\"left\\\">\\n                <p>{{ par.name }}</p>\\n            </td>\\n            <td>{{ par.type }}</td>\\n            <td class=\\\"left\\\"><div [innerHTML]=\\\"par.description\\\"></div></td>\\n        </tr>\\n    </tbody>\\n</table>\\n<p *ngIf=\\\"!inputParameters?.length\\\">The component has no input parameters</p>\\n\\n<h6>Outputs</h6>\\n<table class=\\\"table\\\" *ngIf=\\\"outputParameters?.length\\\">\\n    <thead>\\n        <tr>\\n            <th class=\\\"left\\\">Name</th>\\n            <th>Type</th>\\n            <th class=\\\"left\\\">Description</th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let par of outputParameters\\\">\\n            <td class=\\\"left\\\">\\n                <p>{{ par.name }}</p>\\n            </td>\\n            <td>{{ par.type }}</td>\\n            <td class=\\\"left\\\"><div [innerHTML]=\\\"par.description\\\"></div></td>\\n        </tr>\\n    </tbody>\\n</table>\\n<p *ngIf=\\\"!outputParameters?.length\\\">The component does not emit any values</p>\\n\",\n                styles: [\"::ng-deep body p{margin-top:0}\"]\n            }] }\n];\n/** @nocollapse */\nApiViewerComponent.ctorParameters = () => [\n    { type: DocumentationRetrieverService }\n];\nApiViewerComponent.propDecorators = {\n    component: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: api-viewer/api-viewer.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$3 = [ApiViewerComponent];\nclass ApiViewerModule {\n}\nApiViewerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule],\n                declarations: [...declarations$3],\n                exports: [...declarations$3],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: documentation-container/documentation-container.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$4 = [DocumentationContainerComponent];\nclass DocumentationContainerModule {\n}\nDocumentationContainerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [ClarityModule, CommonModule, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n                declarations: [...declarations$4],\n                entryComponents: [DocumentationContainerComponent],\n                exports: [...declarations$4, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: doc-lib.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst declarations$5 = [];\n/**\n * Token that makes the documentation JSONs available to the following factory function.\n * @type {?}\n */\nconst DOCUMENTATION_DATA = new InjectionToken('DocLibModule.forRoot() CompoDocRetrieverService doc jsons.');\n/**\n * Token that makes Stqckblitz JSON data available to factory functions\n * @type {?}\n */\nconst STACKBLITZ_DATA = new InjectionToken('DocLibModule.forRoot() StackBlitz template JSON data');\n/**\n * @param {?} documentations\n * @return {?}\n */\nfunction getCompoDocRetrieverService(documentations) {\n    return new CompoDocRetrieverService(documentations);\n}\n/**\n * @param {?} sbData\n * @param {?} docRetrieverService\n * @return {?}\n */\nfunction getStackBlitzWriter(sbData, docRetrieverService) {\n    return new StackBlitzWriterService(sbData, docRetrieverService);\n}\nclass DocLibModule {\n    /**\n     * Called in the host package importing this doc library for providing the documentation JSONs needed for\n     * {\\@link CompoDocRetrieverService}\n     * @param {?} documentations\n     * @param {?} stackblitzData\n     * @return {?}\n     */\n    static forRoot(documentations, stackblitzData) {\n        return {\n            ngModule: DocLibModule,\n            providers: [\n                // For injecting 'documentations' into factory function, we have to first provide them as injectable.\n                {\n                    provide: DOCUMENTATION_DATA,\n                    useValue: documentations,\n                },\n                {\n                    provide: STACKBLITZ_INFO,\n                    useValue: stackblitzData,\n                },\n                {\n                    provide: DocumentationRetrieverService,\n                    useFactory: getCompoDocRetrieverService,\n                    deps: [DOCUMENTATION_DATA],\n                },\n                {\n                    provide: StackBlitzWriterService,\n                    deps: [STACKBLITZ_INFO, DocumentationRetrieverService],\n                    useFactory: getStackBlitzWriter,\n                },\n            ],\n        };\n    }\n}\nDocLibModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [DocumentationContainerModule],\n                declarations: [...declarations$5],\n                exports: [...declarations$5, DocumentationContainerModule],\n                providers: [{ provide: HighlightService, useClass: PrismHighlightService }],\n            },] }\n];\n\nexport { ApiViewerComponent, DOCUMENTATION_DATA, DocLibModule, Documentation, DocumentationContainerComponent, DocumentationRetrieverService, ExampleViewerComponent, OverviewViewerComponent, PrismHighlightService, STACKBLITZ_DATA, STACKBLITZ_INFO, SourceCodeViewerComponent, StackBlitzWriterService, getCompoDocRetrieverService, getStackBlitzWriter, CompoDocRetrieverService as ɵa, DocumentationContainerModule as ɵb, OverviewViewerModule as ɵc, OverviewViewerComponent as ɵd, ApiViewerModule as ɵe, ApiViewerComponent as ɵf, ExampleViewerModule as ɵg, SourceCodeViewerModule as ɵh, SourceCodeViewerComponent as ɵi, HighlightService as ɵj, ExampleViewerComponent as ɵk, DocumentationContainerComponent as ɵl, PrismHighlightService as ɵm };\n//# sourceMappingURL=vcd-ui-doc-lib.js.map\n","import { Injectable, Pipe, InjectionToken, ChangeDetectorRef, NgModule, Inject, Optional } from '@angular/core';\nimport MessageFormat from 'messageformat';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/loader/translation-loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/**\n * A HTTP loader that can load translations from some assetUrl.\n */\nclass TranslationLoader {\n    /**\n     * Constructs the loader to load resources from the given {\\@link assetUrl}.\n     * @param {?} http\n     * @param {?} assetUrl\n     */\n    constructor(http, assetUrl) {\n        this.http = http;\n        this.assetUrl = assetUrl;\n    }\n    /**\n     * Returns the translations for the given language that are located at the {\\@link assetUrl}.\n     * @param {?} language\n     * @return {?}\n     */\n    getTranslation(language) {\n        return this.http.get(`${this.assetUrl}${TranslationLoader.PREFIX}${language}${TranslationLoader.SUFFIX}`);\n    }\n    /**\n     * Returns the translations for all languages that are located at the {\\@link assetUrl}.\n     * @return {?}\n     */\n    getCombinedTranslation() {\n        return this.http.get(`${this.assetUrl}/../i18n${TranslationLoader.SUFFIX}`);\n    }\n}\nTranslationLoader.PREFIX = '/i18n/';\nTranslationLoader.SUFFIX = '.json';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/platform-util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n/*\n * Copyright 2017 VMware, Inc. All rights reserved. VMware Confidential\n */\nclass PlatformUtil {\n}\nPlatformUtil.browser = {\n    // tslint:disable-next-line: no-string-literal\n    isOpera: !!window['opera'] || navigator.userAgent.indexOf(' OPR/') >= 0,\n    // tslint:disable-next-line: no-string-literal\n    isFirefox: typeof window['InstallTrigger'] !== 'undefined',\n    // tslint:disable-next-line: no-string-literal\n    isSafari: Object.prototype.toString.call(window['HTMLElement']).indexOf('Constructor') > 0,\n    // tslint:disable-next-line: no-string-literal\n    isChrome: !!window['chrome'] && !(!!window['opera'] || navigator.userAgent.indexOf(' OPR/') >= 0),\n    // tslint:disable-next-line: no-string-literal\n    isIE: /*@cc_on!@*/  !!document['documentMode'],\n};\nPlatformUtil.os = {\n    isMobile: false,\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/service/translation-service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Basic translation service to implement ICU positional interpolation only.\n * @abstract\n */\nclass TranslationService {\n    constructor() {\n        /**\n         * Options to format Date.\n         */\n        this.defaultDateFormat = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        };\n        /**\n         * Options to format Time.\n         */\n        this.defaultTimeFormat = {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour12: true,\n        };\n        /**\n         * Options to format Date and Time.\n         */\n        this.defaultDateTimeFormat = Object.assign({}, this.defaultDateFormat, this.defaultTimeFormat);\n    }\n}\nTranslationService.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/pipe/format-date-time-pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This function modifies the timezone format in the provided date string in order to work in IE11\n *  (ex. from :+0000 to +00:00)\n * @param {?} dateStr The provided date string\n *  (Complete date plus hours, minutes, seconds, a decimal fraction of a second and timezone, YYYY-MM-DDThh:mm:ss.sTZD\n * @return {?} The modified date string\n *  (Complete date plus hours, minutes, seconds, a decimal fraction of a second and timezone YYYY-MM-DDThh:mm:ss.sTZD)\n */\nfunction formatDateStringToValidFormatForIE(dateStr) {\n    if (!PlatformUtil.browser.isIE) {\n        return dateStr;\n    }\n    // If the format is UTC (Coordinated Universal Time), with a special UTC designator (\"Z\")\n    if (dateStr.substr(-1) === 'Z') {\n        return dateStr;\n    }\n    // If the timezone format is correct (ex.: +00:00)\n    if (dateStr.charAt(dateStr.length - 3) === ':') {\n        return dateStr;\n    }\n    return `${dateStr.substr(0, dateStr.length - 2)}:${dateStr.substr(-2)}`;\n}\n/**\n * This pipe delegates format of DateTime to the translation service.  However, it also\n * marks itself for re-processing if it detects a translation refresh event.\n */\nclass FormatDateTimePipe {\n    /**\n     * @param {?} service\n     */\n    constructor(service) {\n        this.service = service;\n    }\n    /**\n     * Pipe the dateTime into the pipe.\n     * @param {?} dateTime dateTime to be formatted\n     * @param {?=} options determinate how date should be formatted\n     * @return {?}\n     */\n    transform(dateTime, options) {\n        if (!dateTime) {\n            return this.service.formatDateTime(new Date(), options);\n        }\n        if (dateTime instanceof Date) {\n            return this.service.formatDateTime(dateTime, options);\n        }\n        /** @type {?} */\n        const dateString = formatDateStringToValidFormatForIE(dateTime);\n        return this.service.formatDateTime(new Date(dateString), options);\n    }\n}\nFormatDateTimePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'formatDateTime',\n                pure: true,\n            },] }\n];\n/** @nocollapse */\nFormatDateTimePipe.ctorParameters = () => [\n    { type: TranslationService }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/service/message-format-translation-service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Translation service to implement ICU MessageFormat.\n */\nclass MessageFormatTranslationService extends TranslationService {\n    /**\n     * @param {?} preferredLocale\n     * @param {?} fallbackLocale\n     * @param {?=} translationLoader\n     * @param {?=} combinedTranslations\n     */\n    constructor(preferredLocale, fallbackLocale, translationLoader, combinedTranslations) {\n        super();\n        this.preferredLocale = preferredLocale;\n        this.fallbackLocale = fallbackLocale;\n        this.translationLoader = translationLoader;\n        this.combinedTranslations = combinedTranslations;\n        this.translationSet = new BehaviorSubject({});\n    }\n    /**\n     * Merge translations into registry.\n     * @param {?=} set new translations.\n     * @return {?}\n     */\n    registerTranslations(set) {\n        /** @type {?} */\n        const toSet = this.translationSet.value;\n        if (set) {\n            for (const locale in set) {\n                if (set[locale] !== undefined) {\n                    if (typeof toSet[locale] === 'undefined') {\n                        toSet[locale] = {};\n                    }\n                    Object.assign(toSet[locale], set[locale]);\n                }\n            }\n            console.log(toSet);\n            this.translationSet.next(toSet);\n        }\n        else if (this.translationLoader) {\n            /** @type {?} */\n            let subscribable;\n            if (this.combinedTranslations) {\n                subscribable = this.translationLoader.getCombinedTranslation();\n            }\n            else {\n                subscribable = this.translationLoader\n                    .getTranslation(this.preferredLocale)\n                    .pipe(map((/**\n                 * @param {?} translations\n                 * @return {?}\n                 */\n                translations => ({ [this.preferredLocale]: translations }))));\n            }\n            subscribable.subscribe((/**\n             * @param {?} translations\n             * @return {?}\n             */\n            translations => {\n                if (typeof toSet[this.preferredLocale] === 'undefined') {\n                    toSet[this.preferredLocale] = {};\n                }\n                Object.assign(toSet[this.preferredLocale], translations[this.preferredLocale]);\n                this.translationSet.next(toSet);\n            }));\n        }\n        else {\n            throw new Error('Need to supply translations!');\n        }\n    }\n    /**\n     * Translate a key with params.\n     * If the key is missing from the preferred locale, try the fallback locale.\n     * If the key is missing from the fallback locale, returns the key with ? prepended.\n     * Otherwise uses message-format to format the string.\n     * @param {?} key translation key\n     * @param {?=} params array of subsitutions. arrays can be of the form [a, b, c] for positional parameters\n     *      or [{'key1': a, 'key2' b}]\n     * @return {?} translated string.\n     */\n    translate(key, params) {\n        /** @type {?} */\n        const paramObject = params ? (params.length ? params[0] : {}) : {};\n        if (paramObject !== null && typeof paramObject === 'object') {\n            // Use the object of parameters\n            return this.translateHelper(key, paramObject, this.translationSet.value);\n        }\n        else {\n            // Use the array of parameters\n            return this.translateHelper(key, params, this.translationSet.value);\n        }\n    }\n    /**\n     * Translate a key wih params using an observable return.\n     * If te key is missing from the preferred locale, try the fallback locale.\n     * If the key is missing from the fallback locale, returns the key with ? prepended.\n     * Otherwise uses message-format to format the string.\n     * @param {?} key translation key\n     * @param {?=} params array of subsitutions. arrays can be of the form [a, b, c] for positional parameters\n     *      or [{'key1': a, 'key2' b}]\n     * @return {?} an observable of the translated string.\n     */\n    translateAsync(key, params) {\n        /** @type {?} */\n        const paramObject = params ? (params.length ? params[0] : {}) : {};\n        if (paramObject !== null && typeof paramObject === 'object') {\n            // Use the object of parameters\n            return this.translationSet.pipe(map((/**\n             * @param {?} translations\n             * @return {?}\n             */\n            translations => this.translateHelper(key, paramObject, translations))));\n        }\n        else {\n            // Use the array of parameters\n            return this.translationSet.pipe(map((/**\n             * @param {?} translations\n             * @return {?}\n             */\n            translations => this.translateHelper(key, params, translations))));\n        }\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} params\n     * @param {?} translations\n     * @return {?}\n     */\n    translateHelper(key, params, translations) {\n        if (translations[this.preferredLocale] && translations[this.preferredLocale][key]) {\n            return this.formatString(this.preferredLocale, key, params, translations);\n        }\n        else if (translations[this.fallbackLocale] && translations[this.fallbackLocale][key]) {\n            return this.formatString(this.fallbackLocale, key, params, translations);\n        }\n        return '?' + key;\n    }\n    /**\n     * @private\n     * @param {?} locale\n     * @param {?} key\n     * @param {?} translationMap\n     * @param {?} translations\n     * @return {?}\n     */\n    formatString(locale, key, translationMap, translations) {\n        /** @type {?} */\n        const template = translations[locale][key];\n        /** @type {?} */\n        const message = new MessageFormat(locale).compile(template);\n        return message(translationMap);\n    }\n    /**\n     * Use Intl services to format date.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the date string.\n     * If is not set, it will use internal default option for date.\n     * @return {?} formatted date.\n     */\n    formatDate(date, options) {\n        if (options) {\n            return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n        }\n        return new Intl.DateTimeFormat(this.preferredLocale, this.defaultDateFormat).format(date);\n    }\n    /**\n     * Use Intl services to format time.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the time string.\n     * If is not set, it will use internal default option for time.\n     * @return {?} formatted time.\n     */\n    formatTime(date, options) {\n        if (options) {\n            return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n        }\n        return new Intl.DateTimeFormat(this.preferredLocale, this.defaultTimeFormat).format(date);\n    }\n    /**\n     * Use Intl services to format date and time.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the date and time string.\n     * If is not set, it will use internal default option for date and time.\n     * @return {?} formatted date and time.\n     */\n    formatDateTime(date, options) {\n        if (options) {\n            return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n        }\n        return new Intl.DateTimeFormat(this.preferredLocale, this.defaultDateTimeFormat).format(date);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/tokens.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst BOOTSTRAP_DETAILS = new InjectionToken('BOOTSTRAP_DETAILS');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/pipe/translation-pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This pipe delegates translation to the translation service.  However, it also\n * marks itself for re-processing if it detects a translation refresh event.\n */\nclass TranslationPipe {\n    /**\n     * @param {?} translate\n     * @param {?} changeDetector\n     */\n    constructor(translate, changeDetector) {\n        this.translate = translate;\n        this.changeDetector = changeDetector;\n        this.value = '';\n        this.lastKey = '';\n        this.lastArgs = [];\n    }\n    /**\n     * @param {?} key\n     * @param {...?} params\n     * @return {?}\n     */\n    transform(key, ...params) {\n        /*\n         TODO: As fancy as this is I don't think this function should make an array from the params.\n         If we want to pass a variable length array of strings into this function it's hard to pipe in from a template.\n         Example: {{alert.message.code | translate: alert.message.params}} does not work well here.\n         */\n        if (params && params.length && params[0] instanceof Array) {\n            params = params[0];\n        }\n        if (!key || key.length === 0) {\n            return key;\n        }\n        if (key === this.lastKey && params === this.lastArgs) {\n            return this.value;\n        }\n        this.lastKey = key;\n        this.lastArgs = params;\n        this.updateValue(key, ...params);\n        return this.value;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {...?} args\n     * @return {?}\n     */\n    updateValue(key, ...args) {\n        this.translate.translateAsync(key, args).subscribe((/**\n         * @param {?} result\n         * @return {?}\n         */\n        result => {\n            this.value = result;\n            this.changeDetector.markForCheck();\n        }));\n    }\n}\nTranslationPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'translate',\n                pure: false,\n            },] }\n];\n/** @nocollapse */\nTranslationPipe.ctorParameters = () => [\n    { type: TranslationService },\n    { type: ChangeDetectorRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/i18n.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet singletonService = null;\n/**\n * @param {?} details\n * @return {?}\n */\nfunction genericSingletonFactory(details) {\n    if (singletonService === null) {\n        singletonService = new MessageFormatTranslationService(details.locale, 'en');\n    }\n    return singletonService;\n}\n/**\n * A module that mananges translation capabilites for the application.\n */\nclass I18nModule {\n    /**\n     * Creates a {\\@link I18nModule} using the global translation service.\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: I18nModule,\n            providers: [\n                {\n                    provide: TranslationService,\n                    useFactory: genericSingletonFactory,\n                    deps: [BOOTSTRAP_DETAILS],\n                },\n            ],\n        };\n    }\n    /**\n     * Creates a {\\@link I18nModule} using a service that is independent from all other services.\n     * @param {?=} extensionRoute the route translations are located at.\n     * @param {?=} combined if the translations are in one file or many different files.\n     * @return {?}\n     */\n    static forChild(extensionRoute, combined) {\n        /**\n         * An implementation of {\\@link TranslationService} that can inject all of its dependencies.\n         */\n        class ServiceToUse extends MessageFormatTranslationService {\n            /**\n             * @param {?} details\n             * @param {?} loader\n             */\n            constructor(details, loader) {\n                super(details.locale, 'en', loader, combined);\n            }\n        }\n        /** @nocollapse */\n        ServiceToUse.ctorParameters = () => [\n            { type: undefined, decorators: [{ type: Inject, args: [BOOTSTRAP_DETAILS,] }] },\n            { type: TranslationLoader, decorators: [{ type: Optional }] }\n        ];\n        /** @type {?} */\n        const providers = [\n            {\n                provide: TranslationService,\n                useClass: ServiceToUse,\n            },\n        ];\n        // Provide the translation loader if the user provides a URL where the translations should be loaded from.\n        if (extensionRoute) {\n            providers.push({\n                provide: TranslationLoader,\n                useFactory: (/**\n                 * @param {?} client\n                 * @param {?} route\n                 * @return {?}\n                 */\n                (client, route) => {\n                    return new TranslationLoader(client, route);\n                }),\n                deps: [HttpClient, extensionRoute],\n            });\n        }\n        return {\n            ngModule: I18nModule,\n            providers,\n        };\n    }\n}\nI18nModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [TranslationPipe, FormatDateTimePipe],\n                exports: [FormatDateTimePipe, TranslationPipe],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/service/basic-translation-service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interpolate a translation using regex.\n * @param {?} translation the translation to use with positional interpolation points in braces -\n *                    e.g. 'Hello there, {0}.  My name is {1}.'\n * @param {?} params array of interpolations, e.g. ['Brad', 'Janet']\n * @return {?} the interpolated string, e.g. 'Hello there, Brad.  My name is Janet.'\n */\nfunction interpolate(translation, params) {\n    params = params || [];\n    return translation.replace(/{([0-9]+)}/g, (/**\n     * @param {?} _\n     * @param {...?} n\n     * @return {?}\n     */\n    (_, ...n) => {\n        /** @type {?} */\n        const idx = parseInt(n[0], 10);\n        if (params && params[idx]) {\n            return params[idx];\n        }\n        return '';\n    }));\n}\n/**\n * Basic translation service to implement ICU positional interpolation only.\n */\nclass BasicTranslationService extends TranslationService {\n    /**\n     * @param {?} preferredLocale\n     * @param {?} fallbackLocale\n     */\n    constructor(preferredLocale, fallbackLocale) {\n        super();\n        this.preferredLocale = preferredLocale;\n        this.fallbackLocale = fallbackLocale;\n        this.translationSet = {};\n    }\n    /**\n     * Merge translations into registry.\n     * @param {?} set new translations.\n     * @return {?}\n     */\n    registerTranslations(set) {\n        for (const locale in set) {\n            if (set[locale] !== undefined) {\n                if (typeof this.translationSet[locale] === 'undefined') {\n                    this.translationSet[locale] = {};\n                }\n                Object.assign(this.translationSet[locale], set[locale]);\n            }\n        }\n    }\n    /**\n     * Translate a key with params.\n     * If the key is missing from the preferred locale, try the fallback locale.\n     * If the key is missing from the fallback locale, returns the key with ? prepended.\n     * Otherwise interpolates the template.\n     * @param {?} key translation key\n     * @param {?=} params array of subsitutions.\n     * @return {?} translated string.\n     */\n    translate(key, params) {\n        /** @type {?} */\n        const template = this.translationSet[this.preferredLocale][key] || this.translationSet[this.fallbackLocale][key];\n        if (template) {\n            return interpolate(template, params);\n        }\n        return '?' + key;\n    }\n    /**\n     * @param {?} key\n     * @param {?=} params\n     * @return {?}\n     */\n    translateAsync(key, params) {\n        return new BehaviorSubject(this.translate(key, params));\n    }\n    /**\n     * Use Intl services to format date.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the date string.\n     * If is not set, it will use internal default option for date.\n     * @return {?} formatted date.\n     */\n    formatDate(date, options = this.defaultDateFormat) {\n        return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n    }\n    /**\n     * Use Intl services to format time.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the time string.\n     * If is not set, it will use internal default option for time.\n     * @return {?} formatted time.\n     */\n    formatTime(date, options = this.defaultTimeFormat) {\n        return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n    }\n    /**\n     * Use Intl services to format date and time.\n     * @param {?} date date to format\n     * @param {?=} options to specify the format of the date and time string.\n     * If is not set, it will use internal default default option for date and time.\n     * @return {?} formatted date and time.\n     */\n    formatDateTime(date, options = this.defaultDateTimeFormat) {\n        return new Intl.DateTimeFormat(this.preferredLocale, options).format(date);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/service/mock-translation-service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MockTranslationService extends TranslationService {\n    constructor() {\n        super();\n    }\n    /**\n     * @param {?} set\n     * @return {?}\n     */\n    registerTranslations(set) { }\n    /**\n     * @return {?}\n     */\n    get activeLocale() {\n        return this.preferredLocale;\n    }\n    /**\n     * @param {?} key\n     * @param {?=} params\n     * @return {?}\n     */\n    translate(key, params) {\n        return JSON.stringify({ key, params });\n    }\n    /**\n     * @param {?} key\n     * @param {?=} params\n     * @return {?}\n     */\n    translateAsync(key, params) {\n        return new BehaviorSubject(this.translate(key, params));\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    formatDate(date) {\n        return date.toLocaleString();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    formatTime(date) {\n        return date.toLocaleString();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    formatDateTime(date) {\n        return date.toLocaleString();\n    }\n}\n\nexport { BOOTSTRAP_DETAILS, BasicTranslationService, FormatDateTimePipe, I18nModule, MessageFormatTranslationService, MockTranslationService, PlatformUtil, TranslationLoader, TranslationPipe, TranslationService, formatDateStringToValidFormatForIE, genericSingletonFactory };\n//# sourceMappingURL=vcd-i18n.js.map\n","export default \"<clr-tooltip>\\n    <div #cliptextContainer clrTooltipTrigger class=\\\"cliptext-container text-truncate\\\" [ngClass]=\\\"{ inline: isInline }\\\">\\n        <ng-content></ng-content>\\n    </div>\\n    <clr-tooltip-content aria-hidden=\\\"true\\\" *clrIfOpen [clrPosition]=\\\"tooltipPosition\\\" [clrSize]=\\\"size\\\">\\n        <span>{{ tooltipText }}</span>\\n    </clr-tooltip-content>\\n</clr-tooltip>\\n\"","export default \"<clr-modal [clrModalOpen]=\\\"open\\\" (clrModalOpenChange)=\\\"openChange.emit($event)\\\" [clrModalSize]=\\\"'sm'\\\" #modal>\\n    <h3 class=\\\"modal-title\\\">{{ dialogHeader || ('data-exporter.title' | translate) }}</h3>\\n    <div class=\\\"modal-body\\\">\\n        <button\\n            *ngIf=\\\"showSelectAll\\\"\\n            class=\\\"btn btn-sm btn-link select-all\\\"\\n            type=\\\"button\\\"\\n            (click)=\\\"onClickCheckAll()\\\"\\n            [disabled]=\\\"!isSelectAllEnabled\\\"\\n        >\\n            {{ selectAllText || ('select.all' | translate) }}\\n        </button>\\n        <ul class=\\\"list-unstyled column-selection\\\" [formGroup]=\\\"formGroup\\\">\\n            <li *ngFor=\\\"let col of columns\\\">\\n                <clr-checkbox-wrapper>\\n                    <input type=\\\"checkbox\\\" clrCheckbox [formControlName]=\\\"col.fieldName\\\" />\\n                    <label>{{ col.displayName }}</label>\\n                </clr-checkbox-wrapper>\\n            </li>\\n        </ul>\\n        <div class=\\\"progress\\\" [ngClass]=\\\"{ loop: progress == -1, pending: isRequestPending }\\\">\\n            <progress max=\\\"100\\\" value=\\\"{{ progress * 100 }}\\\"></progress>\\n        </div>\\n    </div>\\n    <hr />\\n\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline cancel\\\" (click)=\\\"open = false\\\">\\n            {{ cancelText || ('cancel' | translate) }}\\n        </button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary export\\\" [disabled]=\\\"!isExportEnabled\\\" (click)=\\\"onClickExport()\\\">\\n            {{ exportText || ('export' | translate) }}\\n        </button>\\n    </div>\\n</clr-modal>\\n\"","export default \"<clr-datagrid [clrDgLoading]=\\\"isLoading\\\" [ngClass]=\\\"this.clrDatagridCssClass\\\" (clrDgRefresh)=\\\"gridStateChanged($event)\\\">\\n    <clr-dg-column\\n        *ngFor=\\\"let column of columnsConfig\\\"\\n        [clrDgField]=\\\"column.queryFieldName\\\"\\n        (clrDgSortOrderChange)=\\\"resetToPageOne()\\\"\\n    >\\n        <ng-container *ngIf=\\\"isColumnHideable(column); else notHideable\\\">\\n            <ng-container *clrDgHideableColumn=\\\"{ hidden: column.hideable === GridColumnHideable.Hidden }\\\">{{\\n                column.displayName\\n            }}</ng-container>\\n        </ng-container>\\n        <ng-template #notHideable>{{ column.displayName }}</ng-template>\\n    </clr-dg-column>\\n\\n    <clr-dg-row\\n        *ngFor=\\\"let restItem of items; let i = index\\\"\\n        [ngForTrackBy]=\\\"trackBy\\\"\\n        [ngClass]=\\\"this.clrDatarowCssClassGetter(restItem, i)\\\"\\n        [clrDgItem]=\\\"restItem\\\"\\n    >\\n        <clr-dg-cell *ngFor=\\\"let column of columnsConfig\\\">\\n            <!-- Default renderer -->\\n            <ng-container *ngIf=\\\"column.fieldName\\\">{{ restItem | nestedProperty: column.fieldName }}</ng-container>\\n\\n            <!-- Renderer is a function -->\\n            <ng-container *ngIf=\\\"column.fieldRenderer\\\">{{\\n                restItem | functionRenderer: column.fieldRenderer\\n            }}</ng-container>\\n\\n            <!-- Renderer is a componentRenderer -->\\n            <ng-template\\n                *ngIf=\\\"column.fieldColumnRendererSpec\\\"\\n                [vcdComponentRendererOutlet]=\\\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\\\"\\n            >\\n            </ng-template>\\n        </clr-dg-cell>\\n        <ng-container ngProjectAs=\\\"clr-dg-row-detail\\\" *ngIf=\\\"detailTemplate !== undefined\\\">\\n            <clr-dg-row-detail *clrIfExpanded>\\n                <ng-content *ngTemplateOutlet=\\\"detailTemplate; context: { record: restItem }\\\"> </ng-content>\\n            </clr-dg-row-detail>\\n        </ng-container>\\n    </clr-dg-row>\\n    <clr-dg-row *ngIf=\\\"sameItemsAsPageSize()\\\"> </clr-dg-row>\\n\\n    <clr-dg-footer>\\n        <clr-dg-pagination #paginationData [clrDgTotalItems]=\\\"totalItems\\\" [(clrDgPageSize)]=\\\"this.pagination.pageSize\\\">\\n            <clr-dg-page-size [clrPageSizeOptions]=\\\"this.pagination.pageSizeOptions\\\">{{\\n                paginationDropdownText\\n            }}</clr-dg-page-size>\\n            {{ paginationCallbackWrapper(paginationData) }}\\n        </clr-dg-pagination>\\n    </clr-dg-footer>\\n</clr-datagrid>\\n\"","export default \"<clr-main-container>\\n    <clr-header class=\\\"header-6\\\">\\n        <div class=\\\"branding\\\">\\n            <a routerLink=\\\"/\\\" class=\\\"nav-nlink\\\">\\n                <clr-icon shape=\\\"vm-bug\\\"></clr-icon>\\n                <span class=\\\"title\\\">{{ 'app.title' | translate }}</span>\\n            </a>\\n        </div>\\n    </clr-header>\\n\\n    <div class=\\\"content-container\\\">\\n        <nav class=\\\"sidenav\\\" [clr-nav-level]=\\\"2\\\">\\n            <section class=\\\"sidenav-content\\\">\\n                <section class=\\\"nav-group\\\">\\n                    <label>Components</label>\\n                    <ul class=\\\"nav-list\\\">\\n                        <ng-container *ngFor=\\\"let entry of sideNavEntries\\\">\\n                            <li>\\n                                <a class=\\\"nav-link\\\" [routerLink]=\\\"entry.path\\\" [routerLinkActive]=\\\"['active']\\\">\\n                                    {{ entry.title }}\\n                                </a>\\n                            </li>\\n                        </ng-container>\\n                    </ul>\\n                </section>\\n            </section>\\n        </nav>\\n\\n        <main class=\\\"content-area\\\">\\n            <router-outlet></router-outlet>\\n        </main>\\n    </div>\\n</clr-main-container>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export default \":host(.inline) {\\n  display: inline-block;\\n  vertical-align: middle;\\n}\\n\\nclr-tooltip {\\n  display: block;\\n}\\n\\nclr-tooltip .text-truncate {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RyYXZpcy9idWlsZC92bXdhcmUvdm13YXJlLWNsb3VkLWRpcmVjdG9yLXVpLWNvbXBvbmVudHMvcHJvamVjdHMvY29tcG9uZW50cy9zcmMvY2xpcHRleHQvY2xpcHRleHQuY29tcG9uZW50LnNjc3MiLCJwcm9qZWN0cy9jb21wb25lbnRzL3NyYy9jbGlwdGV4dC9jbGlwdGV4dC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLHFCQUFBO0VBQ0Esc0JBQUE7QUNDSjs7QURFQTtFQUNJLGNBQUE7QUNDSjs7QURDSTtFQUNJLGdCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQ0NSIiwiZmlsZSI6InByb2plY3RzL2NvbXBvbmVudHMvc3JjL2NsaXB0ZXh0L2NsaXB0ZXh0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3QoLmlubGluZSkge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG5jbHItdG9vbHRpcCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAudGV4dC10cnVuY2F0ZSB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cbn1cbiIsIjpob3N0KC5pbmxpbmUpIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG5jbHItdG9vbHRpcCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuY2xyLXRvb2x0aXAgLnRleHQtdHJ1bmNhdGUge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn0iXX0= */\"","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ClrIfOpen, ClrTooltipContent } from '@clr/angular';\n\nexport enum Position {\n    TOP = 'TOP',\n    BOTTOM = 'BOTTOM',\n    BEFORE = 'BEFORE',\n    AFTER = 'AFTER',\n}\n\ntype InlineSpec = false | string;\n\n/**\n * Use a cliptext component when you need to restrict a displayed text to a certain width but still provide to the user\n * the ability to see the full text if it is clipped along with a hint that clipping has taken place. Accessibility\n * should be taken into account.\n *\n * Example: a datagrid with a cell that contains text that cannot fit in one line. The solution is to wrap the content\n * on multiple lines or show as much text as it can fit in one line, showing ellipses ('...') at the end to denote that\n * there is still more content and on hover over to display the full content.\n *\n * The current implementation is based on clarity tooltip component, where the tooltip is available only\n * if clipping has occurred.\n */\n@Component({\n    selector: 'vcd-cliptext',\n    templateUrl: './cliptext.component.html',\n    styleUrls: ['./cliptext.component.scss'],\n})\nexport class CliptextComponent implements AfterViewInit {\n    /**\n     * Setting the position should be avoided as much as possible and considered ONLY in extremely corner case.\n     * Some of the reasons to avoid it are:\n     *  - Clarity will introduce smart positioning '[NG] Smart Popover Component #2923'\n     *  - Future versions may go with different implementation so position may become irrelevant\n     */\n    @Input()\n    set position(position: Position) {\n        switch (position) {\n            // Since we use only LTR languages, the mapping is:\n            // BEFORE->left, AFTER->right, default->'top-right'\n            // If we introduce RTL languages the mapping should be:\n            // BEFORE->right, AFTER->left, default->'top-left'\n            case Position.TOP:\n                this._tooltipPosition = 'top-right';\n                break;\n            case Position.BOTTOM:\n                this._tooltipPosition = 'bottom-right';\n                break;\n            case Position.BEFORE:\n                this._tooltipPosition = 'left';\n                break;\n            case Position.AFTER:\n                this._tooltipPosition = 'right';\n                break;\n            default:\n                this._tooltipPosition = 'top-right';\n        }\n    }\n\n    /**\n     * Whether the tooltip should take up a block, or be inline within text\n     *\n     * If its value is falsy (default), it will be displayed as a block (take up the parent's width).\n     * Otherwise, it should be a CSS string to be used as its max-width;\n     */\n    @Input()\n    set inlineWidth(width: string) {\n        this._inline = width;\n    }\n\n    private _inline: InlineSpec = false;\n\n    @HostBinding('class.inline') get isInline(): boolean {\n        return !!this._inline;\n    }\n\n    @HostBinding('style.maxWidth') get maxWidth(): string {\n        return this._inline || '';\n    }\n\n    /**\n     * Same as Clarity tooltip sizes (xs, sm, md, lg) but currently only the default one (md) is used\n     */\n    get size(): string {\n        return this._size;\n    }\n\n    private _size = 'md';\n\n    get tooltipPosition(): string {\n        return this._tooltipPosition;\n    }\n\n    private _tooltipPosition = 'top-right';\n\n    get tooltipText(): string {\n        return this._tooltipText;\n    }\n\n    private _tooltipText: string;\n\n    @ViewChild('cliptextContainer', { static: true })\n    cliptextContainer: ElementRef;\n\n    @ViewChild(ClrIfOpen, { static: true })\n    private clrIfOpen: ClrIfOpen;\n\n    @ViewChild(ClrTooltipContent, { static: false })\n    set tooltipContent(tooltipContent: ClrTooltipContent) {\n        if (!tooltipContent) {\n            return;\n        }\n        if (!this.isOverflowing()) {\n            this.clrIfOpen.open = false;\n        } else {\n            // Check if the tooltip text has changed\n            const tooltipText = this.cliptextContainer.nativeElement.textContent;\n            if (this._tooltipText !== tooltipText) {\n                this._tooltipText = tooltipText;\n                // Re-trigger open so that clarity tooltip is positioned correctly\n                this.clrIfOpen.open = false;\n                this.clrIfOpen.open = true;\n                this.changeDetector.detectChanges();\n            }\n        }\n    }\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._tooltipText = this.cliptextContainer.nativeElement.textContent;\n    }\n\n    private isOverflowing(): boolean {\n        return isTextOverflowing(this.cliptextContainer.nativeElement);\n\n        // Text overflows when the content element's width is less than its scrollWidth.\n        function isTextOverflowing(el: HTMLElement): boolean {\n            return Math.ceil(el.getBoundingClientRect().width) < el.scrollWidth;\n        }\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CliptextComponent } from './cliptext.component';\nimport { ClarityModule } from '@clr/angular';\n\n@NgModule({\n    declarations: [CliptextComponent],\n    exports: [CliptextComponent],\n    imports: [CommonModule, ClarityModule],\n})\nexport class CliptextModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nexport * from './cliptext.module';\nexport * from './cliptext.component';\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe, DecimalPipe } from '@angular/common';\n\nconst OBJECT_PROPERTY_SEPARATOR = '.';\nconst DATE_OBJECT_CLASS = '[object Date]';\n\n/**\n * Used for extracting the value of nested property of an object.\n *\n * Example:\n * const obj = {\n *     a: {\n *         b: {\n *             c: 'c'\n *         }\n *     }\n * }\n *\n * Invoking `{{ obj | nestedProperty: 'a.b.c' }}` in a template produces c\n */\n@Pipe({\n    name: 'nestedProperty',\n    pure: true,\n})\nexport class NestedPropertyPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) private localeId: string) {}\n    public transform<T>(item: any, property: string): string {\n        if (!item || !property) {\n            return null;\n        }\n        const splitProperty = property.split(OBJECT_PROPERTY_SEPARATOR);\n        let returnValue;\n        if (splitProperty.length > 1) {\n            let value = item;\n            for (const nestedProp of splitProperty) {\n                if (isNullOrUndefined(value) || isNullOrUndefined(value[nestedProp])) {\n                    return null;\n                }\n                value = value[nestedProp];\n            }\n            returnValue = value;\n        } else {\n            if (isNullOrUndefined(item[property])) {\n                return null;\n            }\n            returnValue = item[property];\n        }\n\n        if (typeof returnValue === 'number') {\n            return new DecimalPipe(this.localeId).transform(returnValue);\n        }\n        return returnValue instanceof Date ? new DatePipe(this.localeId).transform(returnValue) : returnValue;\n    }\n}\n\n/**\n * Utility method for covering the 'null' and 'undefined' checks as 'value == null' is equivalent to 'value === null || value === undefined'\n */\nfunction isNullOrUndefined(value: unknown): boolean {\n    return value == null;\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { NestedPropertyPipe } from './nested-property.pipe';\n\nconst declarations = [NestedPropertyPipe];\n\n@NgModule({\n    declarations,\n    exports: [...declarations],\n})\nexport class PipesModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DataExporterModule } from './data-exporter/data-exporter.module';\nimport { DatagridModule } from './datagrid/datagrid.module';\nimport { CliptextModule } from './cliptext/cliptext.module';\n\n@NgModule({\n    imports: [DataExporterModule, DatagridModule, CliptextModule],\n    exports: [DataExporterModule, DatagridModule, CliptextModule],\n})\nexport class ComponentsModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n/**\n * Encodes a data set to be downloaded as a CSV\n */\nexport class CsvExporterService {\n    /**\n     * Creates a string that can be used to create a Blob for a CSV\n     * @param rows 2D array of data. First row is the names for the fields\n     */\n    public createCsv(rows: any[][]): string {\n        return rows.map(row => processRow(row)).join('\\n');\n    }\n\n    /**\n     * Does a client side download\n     * @param csvFile The string contents of a CSV file to be downloaded\n     * @param filename The name of the file to be downloaded\n     */\n    public downloadCsvFile(csvFile: string, filename: string): void {\n        const mimeType = 'text/csv;charset=utf-8;';\n        const blob = new Blob([csvFile], { type: mimeType });\n        // Jan 1, 2020 - Chrome and IE support this\n        if (navigator.msSaveBlob) {\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            const link = document.createElement('a');\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\n/**\n * Returns a string\n * @param row A list of cells to be turned into a CSV string, separated by commas\n */\nfunction processRow(row: unknown[]): string {\n    return row.map(cell => encodeValue(cell)).join(',');\n}\n\n/**\n * Returns a cell's cellValue encoded against spaces, quotes, and CSV injection character\n * @param cellValue Cell cellValue to be encoded\n */\nfunction encodeValue(cellValue: unknown): string {\n    let innerValue = cellValue == null ? '' : cellValue.toString();\n    if (cellValue instanceof Date) {\n        innerValue = cellValue.toLocaleString();\n    }\n    // Double quotes are doubled\n    let result = innerValue.replace(/\"/g, '\"\"');\n\n    // TODO: See https://jira.eng.vmware.com/browse/VDUCC-59\n    // result = escapeAgainstCsvInjection(result);\n\n    // Add quotes around the whole thing if it contains new lines\n    if (result.search(/[\",\\n]/g) >= 0) {\n        result = `\"${result}\"`;\n    }\n    // Escape against\n    return result;\n}\n\n/**\n * TODO: See https://jira.eng.vmware.com/browse/VDUCC-59\n * Prepends a single quote to a value if it starts with =,+,=,@ to prevent formulas from being executed\n * @param value Value to be escaped\n */\n// function escapeAgainstCsvInjection(value: string): string {\n//     if (/^[=+\\-@|%]/.test(value)) {\n//         return `'${value}'`;\n//     }\n//     return value;\n// }\n","export default \"div.progress {\\n  visibility: hidden;\\n}\\ndiv.progress.pending {\\n  visibility: visible;\\n}\\nbutton.select-all {\\n  margin: 0;\\n  padding: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RyYXZpcy9idWlsZC92bXdhcmUvdm13YXJlLWNsb3VkLWRpcmVjdG9yLXVpLWNvbXBvbmVudHMvcHJvamVjdHMvY29tcG9uZW50cy9zcmMvZGF0YS1leHBvcnRlci9kYXRhLWV4cG9ydGVyLmNvbXBvbmVudC5zY3NzIiwicHJvamVjdHMvY29tcG9uZW50cy9zcmMvZGF0YS1leHBvcnRlci9kYXRhLWV4cG9ydGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7QUNDSjtBRENJO0VBQ0ksbUJBQUE7QUNDUjtBREVBO0VBQ0ksU0FBQTtFQUNBLFVBQUE7QUNDSiIsImZpbGUiOiJwcm9qZWN0cy9jb21wb25lbnRzL3NyYy9kYXRhLWV4cG9ydGVyL2RhdGEtZXhwb3J0ZXIuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYucHJvZ3Jlc3Mge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgICYucGVuZGluZyB7XG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgfVxufVxuYnV0dG9uLnNlbGVjdC1hbGwge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuIiwiZGl2LnByb2dyZXNzIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuZGl2LnByb2dyZXNzLnBlbmRpbmcge1xuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xufVxuXG5idXR0b24uc2VsZWN0LWFsbCB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn0iXX0= */\"","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { CsvExporterService } from './csv-exporter.service';\n\n/**\n * Identifiers for each column that user is allowed to select\n */\nexport interface ExportColumn {\n    /**\n     * Displayed in the list of columns\n     */\n    displayName: string;\n    /**\n     * The name of the field in the JSON that is returned and converted to a viewable format\n     */\n    fieldName: string;\n}\n\n/**\n * Information passed to the caller so they can fetch the data\n */\nexport interface DataExportRequestEvent {\n    /**\n     * Call this to indicate a new value to be displayed in the progress indicator.\n     * @param progress A number from 0 to 1 indicating download progress. Passing -1 will make it an indeterminate\n     */\n    updateProgress: (progress: number) => void;\n\n    /**\n     * Call this when all records have been fetched to initiate the CSV creation.\n     * This should only be called once after all data fetching is finished\n     * @param records Records to be converted into a csv file\n     */\n    exportData: (records: object[]) => void;\n\n    /**\n     * Columns selected by the user.\n     */\n    selectedColumns: ExportColumn[];\n}\n\n/**\n * A dialog to export data\n *\n *  - Allows the UI to select columns to be exported\n *  - Provides a progress indicator\n *  - Converts the data that is fetched by the caller into a CSV\n */\n@Component({\n    selector: 'vcd-data-exporter',\n    templateUrl: 'data-exporter.component.html',\n    styleUrls: ['./data-exporter.component.scss'],\n})\nexport class DataExporterComponent implements OnInit {\n    constructor(private csvExporterService: CsvExporterService) {}\n\n    /**\n     * List of columns that can be exported, user may deselect some before sending the download request\n     */\n    @Input() columns: ExportColumn[] = [];\n\n    /**\n     * The name of the file to be downloaded\n     */\n    @Input() fileName = 'data-export.csv';\n\n    /**\n     * Text for the Dialog Header\n     */\n    @Input() dialogHeader: string;\n\n    /**\n     * Text for the cancel button.\n     */\n    @Input() cancelText: string;\n\n    /**\n     * Text for the select all button.\n     */\n    @Input() selectAllText: string;\n\n    /**\n     * Text for the export button.\n     */\n    @Input() exportText: string;\n\n    /**\n     * Whether a box to select/deselect all rows is available\n     */\n    @Input() showSelectAll = true;\n\n    /**\n     * Whether the dialog is open\n     */\n    @Input()\n    set open(value: boolean) {\n        this._open = value;\n        this.openChange.emit(value);\n    }\n    get open(): boolean {\n        return this._open;\n    }\n\n    private _open = false;\n\n    /**\n     * Fires when {@link _open} changes. Its parameter indicates the new state.\n     */\n    @Output() openChange = new EventEmitter<boolean>();\n\n    /**\n     * Called when the export is ready to be created\n     */\n    @Output() dataExportRequest = new EventEmitter<DataExportRequestEvent>();\n\n    /**\n     * True between the time {@link dataExportRequest} fires and {@link DataExportRequestEvent.exportData} is called\n     * or an error is thrown\n     */\n    get isRequestPending(): boolean {\n        return this._isRequestPending;\n    }\n    private _isRequestPending = false;\n\n    /**\n     * Number between 0-1, used for displaying the progress bar.\n     */\n    get progress(): number {\n        return this._progress;\n    }\n    private _progress = 0;\n\n    formGroup: FormGroup;\n\n    onClickExport(): void {\n        this._isRequestPending = true;\n        this.dataExportRequest.emit({\n            exportData: this.exportData.bind(this),\n            updateProgress: this.updateProgress.bind(this),\n            selectedColumns: this.columns.filter(col => this.formGroup.controls[col.fieldName].value),\n        });\n    }\n\n    onClickCheckAll(): void {\n        for (const column of this.columns) {\n            this.formGroup.controls[column.fieldName].setValue(true);\n        }\n    }\n\n    get isSelectAllEnabled(): boolean {\n        for (const column of this.columns) {\n            if (!this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get isExportEnabled(): boolean {\n        if (this.isRequestPending) {\n            return false;\n        }\n        for (const column of this.columns) {\n            if (this.formGroup.controls[column.fieldName].value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    ngOnInit(): void {\n        const controls = this.columns.reduce((previousValue, currentValue) => {\n            previousValue[currentValue.fieldName] = new FormControl(true);\n            return previousValue;\n        }, {});\n        this.formGroup = new FormGroup(controls);\n    }\n\n    private exportData(records: object[]): void {\n        if (!this.open) {\n            return;\n        }\n        this.open = false;\n        this._isRequestPending = false;\n\n        const rows = [\n            // First row is the display names\n            Object.keys(records[0]).map(fieldName => this.getDisplayNameForField(fieldName)),\n            // Then the data\n            ...records.map(rec => Object.keys(rec).map(key => rec[key])),\n        ];\n\n        const csvFile = this.csvExporterService.createCsv(rows);\n        this.csvExporterService.downloadCsvFile(csvFile, this.fileName);\n    }\n\n    private updateProgress(progress: number): void {\n        this._progress = progress;\n    }\n\n    private getDisplayNameForField(fieldName: string): string {\n        for (const column of this.columns) {\n            if (column.fieldName === fieldName) {\n                return column.displayName;\n            }\n        }\n        return fieldName;\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { I18nModule } from '@vcd/i18n';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DataExporterComponent } from './data-exporter.component';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [DataExporterComponent],\n    imports: [CommonModule, ReactiveFormsModule, ClarityModule, I18nModule],\n    exports: [DataExporterComponent],\n})\nexport class DataExporterModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nexport * from './data-exporter.component';\nexport * from './data-exporter.module';\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    ElementRef,\n    TrackByFunction,\n} from '@angular/core';\nimport { FunctionRenderer, GridColumn, GridColumnHideable } from './interfaces/datagrid-column.interface';\nimport { ClrDatagridFilter, ClrDatagrid, ClrDatagridStateInterface, ClrDatagridPagination } from '@clr/angular';\nimport { ComponentRendererSpec } from './interfaces/component-renderer.interface';\n\n/**\n * Different types of row selection on the grid\n */\nexport enum GridSelectionType {\n    /**\n     * For selecting multiple rows\n     */\n    Multi = 'MULTI',\n    /**\n     * For selecting only one row at a time\n     */\n    Single = 'SINGLE',\n    /**\n     * Disables the selection\n     */\n    None = 'NONE',\n}\n\n/**\n * TODO: This API is going to have more properties and is going to be defined as part of\n *  https://jira.eng.vmware.com/browse/VDUCC-21\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface Button {}\n\n/**\n * Representation of data required for rendering contents of cells and pagination information\n */\nexport interface GridDataFetchResult<R> {\n    /**\n     * Items to be listed in the grid\n     */\n    items: R[];\n    /**\n     * Total number of items\n     */\n    totalItems?: number;\n}\n\n/**\n * The information about the currently sorted column.\n */\nexport interface SortedColumn {\n    /**\n     * Whether the column is sorted normally or reversed.\n     */\n    reverse: boolean;\n    /**\n     * The name of the column that is sorted.\n     */\n    name: string;\n}\n\n/**\n * Representation an entity that has a href property.\n */\ninterface HasHref {\n    href?: string;\n}\n\n/**\n * The information about pagionation that will be exposed.\n */\nexport interface PagionationInformation {\n    /**\n     * What page is currently selected.\n     */\n    pageNumber: number;\n    /**\n     * How many items belong on a page.\n     */\n    itemsPerPage: number;\n}\n/**\n * The current state of various features of the grid like filtering, sorting, pagination. This object is emitted as\n * part of the event {@link DatagridComponent.gridRefresh}. The handler then used this object to construct a query.\n * TODO: This interface is going to defined as part of working on the following tasks:\n *  https://jira.eng.vmware.com/browse/VDUCC-14\n *  https://jira.eng.vmware.com/browse/VDUCC-15\n *  https://jira.eng.vmware.com/browse/VDUCC-20\n */\nexport interface GridState<R> {\n    /**\n     * The currently sorted column in the datagrid.\n     */\n    sortColumn?: SortedColumn;\n    /**\n     * The pagination information that the datagrid should show.\n     */\n    pagination: PagionationInformation;\n}\n\n/**\n * For simplifying logic inside the HTML template to differentiate between different {@link GridColumn.renderer}\n * types.\n */\ninterface ColumnConfigInternal<R, T> extends GridColumn<R> {\n    fieldName?: string;\n    fieldRenderer?: FunctionRenderer<R>;\n    fieldColumnRendererSpec?: ComponentRendererSpec<R, T>;\n}\n\n/**\n * Component used for saving the time required for developing a data grid. It takes different properties required for\n * rendering as Inputs and Outputs.\n *\n * Example usage in a component:\n * In the component view, different properties required for the grid are wired as Inputs and Outputs.\n * <vcd-datagrid\n *    (onGridRefresh)=\"fetchData()\"\n *    [columns]=\"columns\"\n *    [gridData]=\"gridData\">\n *  </vcd-datagrid>\n *\n */\n@Component({\n    selector: 'vcd-datagrid',\n    templateUrl: './datagrid.component.html',\n})\nexport class DatagridComponent<R> implements OnInit {\n    /**\n     * Sets the configuration of columns on the grid and updates the {@link columnsConfig} array\n     */\n    @Input()\n    set columns(cols: GridColumn<R>[]) {\n        this._columns = cols;\n        this.getColumnsConfig();\n    }\n    get columns(): GridColumn<R>[] {\n        return this._columns;\n    }\n\n    /**\n     * Set from the caller component using this grid. The input is set upon fetching data by the caller\n     */\n    @Input() set gridData(result: GridDataFetchResult<R>) {\n        this.isLoading = false;\n        this.items = result.items;\n        this.totalItems = result.totalItems;\n        this.updateSelectedItems();\n    }\n\n    /**\n     * Type of row selection on the grid\n     */\n    @Input() set selectionType(selectionType: GridSelectionType) {\n        this._selectionType = selectionType;\n        this.clearSelectionInformation();\n    }\n    GridColumnHideable = GridColumnHideable;\n    private _columns: GridColumn<R>[];\n\n    @ContentChild(TemplateRef, { static: false }) detailTemplate!: TemplateRef<ElementRef>;\n\n    private _selectionType: GridSelectionType = GridSelectionType.None;\n\n    /**\n     * The CSS class to use for the Clarity datagrid.\n     */\n    @Input() clrDatagridCssClass = '';\n\n    /**\n     * The text placed next to the pagination number dropdown.\n     */\n    @Input() paginationDropdownText = '';\n\n    /**\n     * Fired whenever the selection changes. The event data is array of rows selected. The array will contain only one\n     * element in case of single selection\n     */\n    selectionChanged: EventEmitter<R[]>;\n\n    /**\n     * Buttons to display in the toolbar on top of data grid\n     * showHide - Buttons that are not shown always (Eg: Delete button is hidden when there are no rows selected)\n     * enableDisable - Buttons that are always shown but disabled in certain conditions (Eg: Add/New button is always\n     * visible but disabled when no rights)\n     *\n     * TODO: There might be one more property required to define how many buttons should be visible before overflowing.\n     *  This API is going to be refined as part of https://jira.eng.vmware.com/browse/VDUCC-21\n     */\n    buttons: {\n        showHide: Button[];\n        enableDisable: Button[];\n    };\n\n    /**\n     * When there is no data, show this message.\n     *\n     * TODO: Try to avoid showing this before initial load.\n     */\n    emptyGridPlaceholder: string;\n\n    /**\n     * Inline HTML that is passed with the record/rest item as context\n     *\n     * TODO: https://jira.eng.vmware.com/browse/VDUCC-18\n     */\n    expandableRowTemplate: TemplateRef<R>;\n\n    /**\n     * The pagination information that the user should supply.\n     */\n    @Input() pagination: {\n        /**\n         * Available page size options in the dropdown\n         */\n        pageSizeOptions: number[];\n\n        /**\n         * Number of items to be displayed on one page. As a result, the server will return a set of pages with the defined\n         * number of items per page(They can be smaller than the number here in case of last page, filtering etc.,)\n         *\n         * Magic: Auto calculates the size based on available height of the container\n         */\n        // TODO: implement 'Magic'\n        pageSize: number; // | 'Magic';\n    } = {\n        pageSize: 10,\n        pageSizeOptions: [10, 20, 50, 100],\n    };\n\n    /**\n     * Desired height of the grid\n     *\n     * TODO: Should we provide this option for setting the grid height and also for auto grow of the height of the grid.\n     *  Also investigate if we can set this through CSS instead of an input\n     *  The above to-do is going to be worked as part of https://jira.eng.vmware.com/browse/VDUCC-25\n     */\n    height: number;\n\n    /**\n     * Loading indicator on the grid\n     */\n    isLoading = false;\n\n    /**\n     * Used for simplifying logic inside the HTML template to differentiate between different\n     * {@link GridColumn.renderer} types.\n     */\n    columnsConfig: ColumnConfigInternal<R, unknown>[];\n\n    /**\n     * List of items used for displaying rows on the grid\n     */\n    items: R[];\n\n    /**\n     * The value of the single selection.\n     */\n    singleSelected: R = undefined;\n\n    /**\n     * The value of the multi selection.\n     */\n    multiSelection: R[] = [];\n\n    /**\n     * The total number of items that could be displayed in the grid.\n     */\n    totalItems?: number;\n\n    /**\n     * Emitted during the initial rendering, and is emitted whenever filtering/sorting/paging params change\n     * {@link #GridState} is the type of value emitted\n     */\n    @Output()\n    gridRefresh: EventEmitter<GridState<R>> = new EventEmitter<GridState<R>>();\n\n    @ViewChild(ClrDatagridFilter, { static: false }) numericFilter: ClrDatagridFilter;\n\n    @ViewChild(ClrDatagrid, { static: true }) datagrid: ClrDatagrid;\n\n    /**\n     * The pagination display within the datagrid.\n     */\n    @ViewChild(ClrDatagridPagination, { static: false }) paginationComponent: ClrDatagridPagination;\n\n    /**\n     * Returns an identifier for the given record at the given index.\n     *\n     * If the record has a href, defaults to that. Else, defaults to index.\n     */\n    @Input() trackBy: TrackByFunction<R> = (index: number, record: (R & HasHref) | undefined): string | number => {\n        return record && (record.href || index);\n        // tslint:disable-next-line: semicolon\n    };\n\n    /**\n     * Gives the correct string to display for the pagination.\n     *\n     * @param firstItem the index of the first item displayed.\n     * @param lastItem the index of the last item displayed.\n     * @param totalItems the total number of items that could be displayed.\n     */\n    @Input() paginationCallback(firstItem: number, lastItem: number, totalItems: number): string {\n        return `${firstItem} - ${lastItem} of ${totalItems} rows`;\n    }\n\n    /**\n     * Gives the CSS class to use for a given datarow based on its relative index and entity definition.\n     */\n    @Input() clrDatarowCssClassGetter(row: R, index: number): string {\n        return '';\n    }\n\n    ngOnInit(): void {\n        this.isLoading = true;\n        this.clearSelectionInformation();\n    }\n\n    private updateSelectedItems(): void {\n        if (this._selectionType === GridSelectionType.Single) {\n            // Tries to find the currently selected item. If it isn't found, clears the selection.\n            const found = this.items.find(\n                (item, itemIndex) =>\n                    this.trackBy(itemIndex, item) ===\n                    this.trackBy(\n                        this.items.indexOf(this.datagrid.selection.currentSingle),\n                        this.datagrid.selection.currentSingle\n                    )\n            );\n            if (!found) {\n                this.datagrid.selection.currentSingle = undefined;\n            }\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            // Tries to find the currently selected items. If an item isn't found, clears the selection for that item.\n            if (this.datagrid.selection.current) {\n                this.datagrid.selection.current = this.datagrid.selection.current.filter((selected, selectedIndex) => {\n                    const found = this.items.find(\n                        (item, itemIndex) => this.trackBy(itemIndex, item) === this.trackBy(selectedIndex, selected)\n                    );\n                    return found;\n                });\n            }\n        }\n    }\n\n    private clearSelectionInformation(): void {\n        if (!this.datagrid) {\n            return;\n        }\n        if (this._selectionType === GridSelectionType.Single) {\n            this.datagrid.selected = undefined;\n            this.datagrid.singleSelected = this.singleSelected;\n        } else if (this._selectionType === GridSelectionType.Multi) {\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = this.multiSelection;\n        } else if (this._selectionType === GridSelectionType.None) {\n            this.datagrid.selected = [];\n            this.datagrid.singleSelected = undefined;\n            this.datagrid.selected = undefined;\n        }\n    }\n\n    /**\n     * Returns the items selected in the VCD datagrid.\n     */\n    getDatagridSelection(): R[] {\n        if (this.datagrid.selection.currentSingle) {\n            return [this.datagrid.selection.currentSingle];\n        }\n        if (this.datagrid.selection.current) {\n            return this.datagrid.selection.current;\n        }\n        return [];\n    }\n\n    /**\n     * Called when the {@param state} of the Clarity datagrid changes.\n     */\n    gridStateChanged(state: ClrDatagridStateInterface): void {\n        // Update pagination information.\n        const pagination = {\n            pageNumber: state.page ? state.page.current : 1,\n            itemsPerPage: state.page ? state.page.size : 10,\n        };\n\n        // Update the sorting information.\n        const toEmit: GridState<R> = {\n            pagination,\n        };\n        if (state.sort && typeof state.sort.by === 'string') {\n            toEmit.sortColumn = {\n                name: state.sort.by,\n                reverse: state.sort.reverse,\n            };\n        }\n\n        this.gridRefresh.emit(toEmit);\n    }\n\n    /**\n     * Resets the pagination to page 1.\n     */\n    resetToPageOne(): void {\n        this.paginationComponent.currentPage = 1;\n    }\n\n    isColumnHideable(column: GridColumn<R>): boolean {\n        return column && column.hideable && column.hideable !== GridColumnHideable.Never;\n    }\n\n    /**\n     * Says if the number of items matches the page size.\n     */\n    sameItemsAsPageSize(): boolean {\n        return this.pagination.pageSize === this.items.length;\n    }\n\n    /**\n     * Updates the pagination data and makes the callback.\n     */\n    paginationCallbackWrapper(paginationData: ClrDatagridPagination): string {\n        return this.paginationCallback(paginationData.firstItem + 1, paginationData.lastItem + 1, this.totalItems);\n    }\n\n    /**\n     * Defines the {@property columnsConfig} by adding extra property required for differentiating different kinds\n     * of renderers which is required in the HTML template.\n     */\n    private getColumnsConfig(): void {\n        this.columnsConfig = this.columns.map(column => {\n            const columnConfig: ColumnConfigInternal<R, unknown> = {\n                ...column,\n            };\n\n            if (column.renderer instanceof Function) {\n                columnConfig.fieldRenderer = column.renderer as FunctionRenderer<R>;\n            } else if ((column.renderer as ComponentRendererSpec<R, unknown>).config) {\n                columnConfig.fieldColumnRendererSpec = column.renderer as ComponentRendererSpec<R, unknown>;\n            } else {\n                columnConfig.fieldName = column.renderer as string;\n            }\n\n            return columnConfig;\n        });\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { DatagridComponent } from './datagrid.component';\nimport { ComponentRendererOutletDirective } from './directives/component-renderer-outlet.directive';\nimport { PipesModule } from '../common/pipes/pipes.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FunctionRendererPipe } from './pipes/function-renderer.pipe';\nimport { BoldTextRendererComponent } from './renderers/bold-text-renderer.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nconst directives = [DatagridComponent, ComponentRendererOutletDirective];\nconst pipes = [FunctionRendererPipe];\nconst renderers = [BoldTextRendererComponent];\n\n@NgModule({\n    imports: [CommonModule, ClarityModule, PipesModule, ReactiveFormsModule, BrowserAnimationsModule],\n    declarations: [...directives, ...renderers, ...pipes],\n    providers: [],\n    exports: [DatagridComponent, ...renderers],\n    entryComponents: [...renderers],\n})\nexport class DatagridModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { ComponentFactoryResolver, ComponentRef, Directive, Input, ViewContainerRef } from '@angular/core';\nimport {\n    ComponentRenderer,\n    ComponentRendererConstructor,\n    ComponentRendererSpec,\n} from '../interfaces/component-renderer.interface';\n\n/**\n * Type of the Input given to the {@link ComponentRendererOutletDirective.vcdComponentRendererOutlet}\n */\nexport interface ComponentRendererType<R, T> {\n    /**\n     * Contains the constructor of component to be rendered and also the method that gets the configuration required for\n     * the component API\n     */\n    rendererSpec: ComponentRendererSpec<R, T>;\n\n    /**\n     * serves as argument for {@link ComponentRenderer.config} method\n     */\n    context: R;\n}\n\n/**\n * Component that acts as a host element for dynamic rendering of component constructors.\n * It takes {@link ComponentRendererSpec} as input and also 'context' as input that serves as argument for\n * {@link ComponentRenderer.config} method. Attaches the component to be rendered to the view container of host element\n * and updates it's configuration whenever changed.\n *\n * Example usage:\n * <ng-template\n *      [vcdComponentRendererOutlet]=\"{ rendererSpec: column.fieldColumnRendererSpec, context: restItem }\"\n * ></ng-template>\n *\n */\n@Directive({\n    selector: '[vcdComponentRendererOutlet]',\n})\nexport class ComponentRendererOutletDirective<R, T> {\n    private componentRef: ComponentRef<ComponentRenderer<T>>;\n    private componentType: ComponentRendererConstructor<T>;\n\n    constructor(private viewContainerRef: ViewContainerRef, private cfr: ComponentFactoryResolver) {}\n\n    @Input()\n    set vcdComponentRendererOutlet(renderer: ComponentRendererType<R, T>) {\n        if (this.componentType !== renderer.rendererSpec.type) {\n            // Cache the componentType to avoid redundant detaching and attaching of component to this host\n            this.componentType = renderer.rendererSpec.type;\n            this.componentRef = this.attachRenderer();\n        }\n        this.assignValue(renderer.rendererSpec.config, renderer.context);\n    }\n\n    /**\n     * Attaches the passed component type to the view of this directive host\n     */\n    private attachRenderer(): ComponentRef<ComponentRenderer<T>> {\n        if (this.componentRef) {\n            this.detachRenderer();\n        }\n        const componentFactory = this.cfr.resolveComponentFactory(this.componentType);\n        return this.viewContainerRef.createComponent(componentFactory);\n    }\n\n    /**\n     * Updates the configuration of instantiated component\n     */\n    private assignValue(config: ((r: R) => T) | T, context: R): void {\n        if (!this.componentRef || !this.componentRef.instance) {\n            return;\n        }\n        this.componentRef.instance.config = config instanceof Function ? config(context) : config;\n    }\n\n    private detachRenderer(): void {\n        this.viewContainerRef.remove();\n        this.componentRef = null;\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nexport * from './datagrid.module';\nexport * from './datagrid.component';\nexport * from './interfaces/datagrid-column.interface';\nexport * from './interfaces/component-renderer.interface';\nexport * from './renderers';\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Type } from '@angular/core';\n\n/**\n * Implemented by all the component renderers\n */\nexport interface ComponentRenderer<T> {\n    /**\n     * Object used by the component renderers inside their HTML template\n     */\n    config: T;\n}\n\n/**\n * Used for the type safety of {@link ComponentRendererSpec#type}\n */\nexport type ComponentRendererConstructor<V> = Type<ComponentRenderer<V>>;\n\n/**\n * An object that contains the constructor of a component{@link ComponentRenderer} to be displayed and value getter\n * function definition that would get the value to be used by the component in its template. This is useful for dynamically\n * rendering/configuring filters and columns/cells\n *\n * The directive{@link ComponentRendererOutletDirective} using this renderer spec to display the component will be\n * responsible for setting the actual renderer's value{@link ComponentRenderer#config} after dynamically\n * initializing it. But the caller is responsible for providing a config\n */\nexport interface ComponentRendererSpec<R, V> {\n    /**\n     * Constructor of a specific type of component renderer desired to be used\n     */\n    type: ComponentRendererConstructor<V>;\n\n    /**\n     * This can either be a function that creates the config object (in case of a cell renderer) or config object itself (in\n     * case of a filter renderer) to be set on the ComponentRenderer.\n     * @param value An object to be transformed into {@link ComponentRenderer#config}. It's passed in by the calling\n     * component\n     */\n    config: ((value?: R) => V) | V;\n}\n\n/**\n * Utility function to enforce type safety on output of the config function. The output is used as value context\n * inside ComponentRenderer's template\n *\n * Example usage:\n * const gridColumn = {\n *   renderer: RendererSpec<SomeRecord, IconRendererConfiguration>(IconComponentRendererCtor, (r: SomeRecord) => v)\n * }\n *\n * In the above example, this method helps in making sure that the value \"v\" returned by the config function is of\n * IconRendererConfiguration type\n */\nexport function RendererSpec<R, C>(componentRendererSpec: {\n    type: ComponentRendererConstructor<C>;\n    /**\n     *  'C & {}' makes the return type be not used as the inference site for C and instead use the constructor type from\n     *  the first argument.\n     *  {@link https://stackoverflow.com/questions/59055154/typescript-generics-infer-type-from-the-type-of-function-arguments}\n     */\n    config: ((record?: R) => C & {}) | C;\n}): ComponentRendererSpec<R, C> {\n    return componentRendererSpec;\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n/**\n * Whether something shows up in the column toggler\n */\nimport { ComponentRendererSpec } from './component-renderer.interface';\n\nexport enum GridColumnHideable {\n    /**\n     * Does not show up in column toggle box\n     */\n    Never = 'NEVER',\n    /**\n     * Shows up in column toggle box, column is visible\n     */\n    Shown = 'SHOWN',\n    /**\n     * Shows up in column toggle box, column is hidden\n     */\n    Hidden = 'HIDDEN',\n}\n\n/**\n * The sorting direction of the column values\n */\nexport enum GridColumnSortDirection {\n    Asc = 'ASCENDING',\n    Desc = 'DESCENDING',\n    None = 'NONE',\n}\n\n/**\n * Column renderer as a function. Defined in calling component when the cell value is calculated from different\n * properties.\n * @param record The record for the row being rendered\n * @return The string to be displayed for that cell\n */\nexport type FunctionRenderer<T> = (record: T) => string;\n\n/**\n * Configuration object defined in the caller. This contains properties for the column header (text, filtering,\n * sorting, toggling etc.,) and content for row cells.\n *\n * Example:\n * const gridColumn: GridColumn<SomeRecord> = {\n *   displayName: \"Column Heading\",\n *   renderer: \"someRecord.property\",\n *   hideable: \"NEVER\"\n * }\n *\n * The above column is rendered with \"Column Heading\" text in it's heading and it is not shown in the column toggler.\n * The value of the property \"someRecord.property\" is rendered in cells corresponding to the column.\n */\nexport interface GridColumn<R> {\n    /**\n     * Header text for the column\n     */\n    displayName: string;\n\n    /**\n     * Used for sorting/filtering. Not needed for columns not filterable/sortable\n     * TODO: do we need to support array type for querying across multiple columns?\n     */\n    queryFieldName?: string;\n\n    /**\n     * If the renderer passed in is a\n     * - string: Used as default renderer. Can be a dot separated string to identify a nested property of the item\n     * - {@link FunctionRenderer}: When you want to create a calculated column, but don't need custom HTML\n     * - TemplateRef: When custom HTML is needed and when it has to be passed in as a inline HTML\n     * - {@link ComponentRendererSpec}: When HTML is needed and when the HTML is provided as a component\n     */\n    renderer: string | FunctionRenderer<R> | ComponentRendererSpec<R, unknown>;\n\n    /**\n     * Whether the column shows up in the column toggler and if the column shows up, it reflects the toggle state\n     */\n    hideable?: GridColumnHideable;\n\n    /**\n     * When there is no data, show this message.\n     *\n     * Try to avoid showing this before initial load.\n     */\n    emptyColumnPlaceholder?: string;\n\n    /**\n     * TODO: Should this be made to work with top level search on grids across all columns?\n     *  The above to-do is going to be worked on as part of https://jira.eng.vmware.com/browse/VDUCC-27 and\n     */\n    filter?: ComponentRendererSpec<R, unknown>;\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Used for executing the functions of column cells which use functions to calculate their values from different\n * properties of an object\n */\n@Pipe({\n    name: 'functionRenderer',\n    pure: true,\n})\nexport class FunctionRendererPipe implements PipeTransform {\n    public transform(item: any, renderer: (val: any) => any): string {\n        if (!item || !renderer) {\n            return null;\n        }\n        return renderer(item);\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, Input } from '@angular/core';\nimport { ComponentRenderer } from '../interfaces/component-renderer.interface';\n\n/**\n * {@link ComponentRenderer.config} type that the {@link BoldTextRendererComponent} can understand\n */\nexport interface BoldTextRendererConfig {\n    /**\n     * Text to be displayed in bold font\n     */\n    text: string;\n}\n\n/**\n * A {@link ComponentRenderer} component that is used for rendering a bold text inside a column cell template\n *\n * @example Example usage with RendererSpec:\n *     columns: GridColumn<MockRecord>[] = [\n *       {\n *         displayName: 'Component Renderer',\n *         renderer: RendererSpec(\n *           BoldTextRendererComponent,\n *           (record: MockRecord) => ({text: record.name})\n *         )\n *       }\n *     ];\n */\n@Component({\n    template: `\n        <strong>{{ config.text }}</strong>\n    `,\n})\nexport class BoldTextRendererComponent implements ComponentRenderer<BoldTextRendererConfig> {\n    @Input()\n    config: BoldTextRendererConfig;\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nexport * from './bold-text-renderer.component';\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n/*\n * Public API Surface of components\n */\nexport * from './data-exporter/index';\nexport * from './datagrid/index';\nexport * from './cliptext/index';\nexport * from './components.module';\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [RouterModule.forRoot([])],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9leGFtcGxlcy9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { Documentation, DocumentationEntry } from '@vcd/ui-doc-lib';\nimport { Router } from '@angular/router';\n\ninterface SideNavEntries {\n    title: string;\n    path: string;\n}\n\n@Component({\n    selector: 'vcd-examples-app',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    /**\n     * Gets the registered documentation entries {@link Documentation.getAllEntries} and sets them on a array to display\n     * on the side navigation\n     */\n    sideNavEntries: SideNavEntries[] = Documentation.getAllEntries().map((entry: DocumentationEntry) => ({\n        title: entry.displayName,\n        path: entry.urlSegment,\n    }));\n\n    constructor(router: Router) {\n        /**\n         * Gets the Angular routes to be navigated in the app components's router outlet\n         * Loading the routes in {@link AppRoutingModule} is causing the following error: ERROR in Cannot read property\n         * 'loadChildren' of undefined https://stackoverflow.com/questions/44233195/dynamically-adding-routes-in-angular\n         * TODO: https://jira.eng.vmware.com/browse/VDUCC-72\n         */\n        router.resetConfig(Documentation.getRoutes());\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { registerLocaleData } from '@angular/common';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeEs from '@angular/common/locales/es';\nimport { FormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CompodocSchema, DocLibModule } from '@vcd/ui-doc-lib';\n\nimport { AppComponent } from './app.component';\nimport { CliptextExamplesModule } from '../components/cliptext/cliptext.examples.module';\nimport { DataExporterExamplesModule } from '../components/data-exporter/data-exporter.examples.module';\n\nimport componentsDocumentationJson from '../../gen/components-doc/documentation.json';\nimport examplesDocumentationJson from '../../gen/examples-doc/documentation.json';\nimport { DatagridExamplesModule } from '../components/datagrid/datagrid.examples.module';\nimport { StackBlitzInfo } from '../../../doc-lib/src/stack-blitz-writer.service';\nimport { I18nModule, TranslationService } from '@vcd/i18n';\nimport { DatagridModule } from 'projects/components/src/datagrid';\nimport { DataExporterModule } from 'projects/components/src/public-api';\nimport { CliptextModule } from 'projects/components/src/cliptext';\n\nregisterLocaleData(localeFr, 'fr');\nregisterLocaleData(localeEs, 'es');\n\nconst ASSET_URL = new InjectionToken('ASSETS');\n\n/**\n * The following 2 constants are declared for AOT compilation purpose. Otherwise, the compilation would silently fail and\n * the doc jsons are given as null to the DocLibModule.\n * NOTE: The following two has to be exported otherwise the AoT compiler won't see it.\n */\nexport const docJson1: CompodocSchema = componentsDocumentationJson;\nexport const docJson2: CompodocSchema = examplesDocumentationJson;\nexport const sbInfo: StackBlitzInfo = {\n    templateId: 'vcd-ui-cc-starter-clarity-v8-yhe4yg',\n    projectName: 'VMware Cloud Director UI Components',\n    moduleFinder(componentName: string): string {\n        return componentName.replace('ExampleComponent', 'ExampleModule');\n    },\n};\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        HttpClientModule,\n        I18nModule.forChild(ASSET_URL, true),\n        BrowserModule,\n        AppRoutingModule,\n        DocLibModule,\n        ClarityModule,\n        BrowserAnimationsModule,\n        DocLibModule.forRoot([docJson1, docJson2], sbInfo),\n        CliptextExamplesModule,\n        FormsModule,\n        DatagridExamplesModule,\n        DataExporterExamplesModule,\n        DatagridModule,\n        DataExporterModule,\n        CliptextModule,\n    ],\n    providers: [\n        {\n            provide: ASSET_URL,\n            useFactory: () => 'assets/translations',\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {\n    constructor(translationService: TranslationService) {\n        translationService.registerTranslations();\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'vcd-cliptext-datagrid-example',\n    styles: [\n        `\n            clr-datagrid .clip-text-width {\n                width: 200px;\n            }\n        `,\n    ],\n    template: `\n        Resize the column and observe the text in the row where the textclip is used. Hover over the cell to see the\n        full text.\n\n        <clr-datagrid>\n            <clr-dg-column class=\"clip-text-width\">Text</clr-dg-column>\n            <clr-dg-column>Clipping</clr-dg-column>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                    dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula non.\n                    Etiam ac pulvinar odio.\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    No\n                </clr-dg-cell>\n            </clr-dg-row>\n\n            <clr-dg-row>\n                <clr-dg-cell>\n                    <vcd-cliptext>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. In pharetra sem id mauris condimentum,\n                        dapibus pretium neque commodo. Pellentesque rhoncus tincidunt libero, eget tempus leo vehicula\n                        non. Etiam ac pulvinar odio.\n                    </vcd-cliptext>\n                </clr-dg-cell>\n                <clr-dg-cell>\n                    Yes\n                </clr-dg-cell>\n            </clr-dg-row>\n        </clr-datagrid>\n    `,\n})\nexport class CliptextDatagridExampleComponent {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CliptextDatagridExampleComponent } from './cliptext-datagrid.example.component';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CliptextModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [CliptextDatagridExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, CliptextModule],\n    exports: [CliptextDatagridExampleComponent],\n    entryComponents: [CliptextDatagridExampleComponent],\n})\nexport class CliptextDatagridExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'vcd-cliptext-dynamic-inline-example',\n    styles: [\n        `\n            vcd-cliptext {\n                font-weight: bold;\n            }\n        `,\n    ],\n\n    template: `\n        <label>Dynamic text:</label>\n        <input placeholder=\"Write some text\" [formControl]=\"dynamicText\" />\n        <p>\n            Modify the input above and observe the text:\n            <vcd-cliptext [inlineWidth]=\"'200px'\">{{ dynamicText.value }}</vcd-cliptext>\n            You can try with long and short text. There is no tooltip when the text fits the provided width.\n        </p>\n        <p>The toolptip is updated upon display.</p>\n    `,\n})\nexport class CliptextDynamicInlineExampleComponent {\n    dynamicText = new FormControl('Dynamic text goes here');\n}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ClarityModule } from '@clr/angular';\nimport { CliptextModule } from '@vcd/ui-components';\nimport { CliptextDynamicInlineExampleComponent } from './cliptext-dynamic-inline.example.component';\n\n@NgModule({\n    declarations: [CliptextDynamicInlineExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, CliptextModule],\n    exports: [CliptextDynamicInlineExampleComponent],\n    entryComponents: [CliptextDynamicInlineExampleComponent],\n})\nexport class CliptextDynamicInlineExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { CliptextComponent } from '@vcd/ui-components';\nimport { CliptextDatagridExampleComponent } from './cliptext-datagrid.example.component';\nimport { CliptextDynamicInlineExampleComponent } from './cliptext-dynamic-inline.example.component';\nimport { CliptextDatagridExampleModule } from './cliptext-datagrid.example.module';\nimport { CliptextDynamicInlineExampleModule } from './cliptext-dynamic-inline.example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: CliptextComponent,\n    displayName: 'Cliptext',\n    urlSegment: 'cliptext',\n    examples: [\n        {\n            component: CliptextDatagridExampleComponent,\n            forComponent: null,\n            title: 'Cliptext in a datagrid',\n        },\n        {\n            component: CliptextDynamicInlineExampleComponent,\n            forComponent: null,\n            title: 'Dynamic Inline Text',\n        },\n    ],\n});\n\n@NgModule({\n    imports: [CliptextDatagridExampleModule, CliptextDynamicInlineExampleModule],\n})\nexport class CliptextExamplesModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { DataExportRequestEvent, ExportColumn } from '@vcd/ui-components';\n\n@Component({\n    selector: 'vcd-data-exporter-example',\n    template: `\n        <h2>Data Exporter</h2>\n        <button (click)=\"dataExporterOpen = true\">\n            Show Modal\n        </button>\n        <vcd-data-exporter\n            *ngIf=\"dataExporterOpen\"\n            [(open)]=\"dataExporterOpen\"\n            (dataExportRequest)=\"onExportRequest($event)\"\n            [columns]=\"exportColumns\"\n        >\n        </vcd-data-exporter>\n    `,\n})\nexport class DataExporterExampleComponent {\n    exportColumns: ExportColumn[] = [\n        { fieldName: 'name', displayName: 'Name' },\n        { fieldName: 'desc', displayName: 'Description' },\n    ];\n\n    dataExporterOpen = false;\n\n    onExportRequest(request: DataExportRequestEvent): void {\n        let currentProgress = 0;\n\n        const updateProgress = () => {\n            currentProgress += 0.01;\n            if (currentProgress < 1) {\n                request.updateProgress(currentProgress);\n                setTimeout(updateProgress, 50);\n            } else {\n                request.exportData([\n                    { name: 'Jack', desc: 'Tis what tis' },\n                    { name: 'Jill', desc: 'Still tis what tis' },\n                ]);\n            }\n        };\n        updateProgress();\n    }\n}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DataExporterExampleComponent } from './data-exporter.example.component';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DataExporterModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [DataExporterExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DataExporterModule],\n    exports: [DataExporterExampleComponent],\n    entryComponents: [DataExporterExampleComponent],\n})\nexport class DataExporterExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DataExporterExampleComponent } from './data-exporter.example.component';\n\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DataExporterComponent } from '@vcd/ui-components';\nimport { DataExporterExampleModule } from './data-exporter.example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: DataExporterComponent,\n    displayName: 'Data Exporter',\n    urlSegment: 'dataExporter',\n    examples: [\n        {\n            component: DataExporterExampleComponent,\n            forComponent: null,\n            title: 'Data Exporter example',\n        },\n    ],\n});\n\n@NgModule({\n    imports: [DataExporterExampleModule],\n})\nexport class DataExporterExamplesModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridColumn, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the css classes per row capability.\n */\n@Component({\n    selector: 'vcd-datagrid-css-classes-example',\n    styles: [\n        `\n            ::ng-deep .yellow-row {\n                background-color: greenyellow;\n            }\n\n            ::ng-deep .red-row {\n                background-color: lightcoral;\n            }\n        `,\n    ],\n    template: `\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [clrDatarowCssClassGetter]=\"clrDatarowCssClassGetter\"\n        ></vcd-datagrid>\n    `,\n})\nexport class DatagridCssClassesExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Some Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'warn' }, { value: 'error' }, { value: 'ok' }, { value: 'ok' }, { value: 'error' }],\n            totalItems: 2,\n        };\n    }\n\n    clrDatarowCssClassGetter(entity: Data, index: number): string {\n        if (entity.value === 'warn') {\n            return 'yellow-row';\n        } else if (entity.value === 'error') {\n            return 'red-row';\n        } else {\n            return '';\n        }\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridCssClassesExampleComponent } from './datagrid-css-classes.example.component';\n\n@NgModule({\n    declarations: [DatagridCssClassesExampleComponent],\n    imports: [CommonModule, ClarityModule, DatagridModule],\n    exports: [DatagridCssClassesExampleComponent],\n    entryComponents: [DatagridCssClassesExampleComponent],\n})\nexport class DatagridCssClassesExampleModule {}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, ContentChild, TemplateRef, ElementRef } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridColumnHideable, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\">\n            <ng-template let-record=\"record\"> DETAILS: {{ record.value }} </ng-template>\n        </vcd-datagrid>\n    `,\n})\nexport class DatagridDetailRowExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n        };\n    }\n}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridDetailRowExampleComponent } from './datagrid-detail-row.example.component';\n\n@NgModule({\n    declarations: [DatagridDetailRowExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridDetailRowExampleComponent],\n    entryComponents: [DatagridDetailRowExampleComponent],\n})\nexport class DatagridDetailRowExampleModule {}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the pagination capability.\n */\n@Component({\n    selector: 'vcd-datagrid-pagination-example',\n    template: `\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [pagination]=\"paginationInfo\"\n        >\n        </vcd-datagrid>\n    `,\n})\nexport class DatagridPaginationExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    paginationInfo = {\n        pageSize: 2,\n        pageSizeOptions: [2, 20, 50, 100],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Column',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        const data: Data[] = [];\n        for (let i = 1; i < 155; i++) {\n            data.push({ value: String(i) });\n        }\n        this.gridData = {\n            items: data.slice(\n                (eventData.pagination.pageNumber - 1) * eventData.pagination.itemsPerPage,\n                eventData.pagination.pageNumber * eventData.pagination.itemsPerPage\n            ),\n            totalItems: data.length,\n        };\n    }\n}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridPaginationExampleComponent } from './datagrid-pagination-example.component';\n\n@NgModule({\n    declarations: [DatagridPaginationExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridPaginationExampleComponent],\n    entryComponents: [DatagridPaginationExampleComponent],\n})\nexport class DatagridPagionationExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridDataFetchResult, GridState, GridColumn, GridSelectionType } from '@vcd/ui-components';\n\ninterface Data {\n    href: string;\n}\n\n/**\n * Logs the selected row to the console when the selection changes.\n * Allows for multi, single, or no selection.\n */\n@Component({\n    selector: 'vcd-datagrid-row-select-example',\n    template: `\n        <button class=\"btn btn-primary\" (click)=\"selectionType = GridSelectionType.Single\">Single Select</button>\n        <button class=\"btn btn-primary\" (click)=\"selectionType = GridSelectionType.Multi\">Multi Select Select</button>\n        <button class=\"btn btn-primary\" (click)=\"selectionType = GridSelectionType.None\">No Select Select</button>\n        <button class=\"btn btn-primary\" (click)=\"this.newData()\">New Data</button>\n        <vcd-datagrid\n            [gridData]=\"gridData\"\n            (gridRefresh)=\"refresh($event)\"\n            [columns]=\"columns\"\n            [selectionType]=\"selectionType\"\n            (selectionChanged)=\"selectionChanged($event)\"\n        ></vcd-datagrid>\n    `,\n})\nexport class DatagridRowSelectExampleComponent {\n    selectionType = GridSelectionType.Multi;\n    GridSelectionType = GridSelectionType;\n\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Some Column',\n            renderer: 'href',\n        },\n    ];\n\n    selectionChanged(selected: Data[]): void {\n        console.log(selected);\n    }\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ href: 'a' }, { href: 'b' }, { href: 'c' }],\n            totalItems: 2,\n        };\n    }\n\n    newData(): void {\n        this.gridData = {\n            items: [{ href: 'a' }, { href: 'b' }, { href: 'd' }],\n            totalItems: 2,\n        };\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridRowSelectExampleComponent } from './datagrid-row-select.example.component';\n\n@NgModule({\n    declarations: [DatagridRowSelectExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridRowSelectExampleComponent],\n    entryComponents: [DatagridRowSelectExampleComponent],\n})\nexport class DatagridRowSelectExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridColumn, GridColumnHideable, GridDataFetchResult, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n}\n\n/**\n * A component that holds an example of the show/hide columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-show-hide-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n})\nexport class DatagridShowHideExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Shown Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Shown,\n        },\n        {\n            displayName: 'Hidden Initially',\n            renderer: 'value',\n            hideable: GridColumnHideable.Hidden,\n        },\n        {\n            displayName: 'Always Shown',\n            renderer: 'value',\n            hideable: GridColumnHideable.Never,\n        },\n        {\n            displayName: 'Always Shown Way #2',\n            renderer: 'value',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        this.gridData = {\n            items: [{ value: 'a' }, { value: 'b' }],\n            totalItems: 2,\n        };\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridShowHideExampleComponent } from './datagrid-show-hide.example.component';\nimport { DatagridModule } from '@vcd/ui-components';\n\n@NgModule({\n    declarations: [DatagridShowHideExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridShowHideExampleComponent],\n    entryComponents: [DatagridShowHideExampleComponent],\n})\nexport class DatagridShowHideExampleModule {}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport { GridDataFetchResult, GridColumn, GridState } from '@vcd/ui-components';\n\ninterface Data {\n    value: string;\n    someBool: boolean;\n}\n\n/**\n * A component that holds an example of the sorting columns capability.\n */\n@Component({\n    selector: 'vcd-datagrid-sort-example',\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"> </vcd-datagrid>\n    `,\n})\nexport class DatagridSortExampleComponent {\n    gridData: GridDataFetchResult<Data> = {\n        items: [],\n    };\n\n    columns: GridColumn<Data>[] = [\n        {\n            displayName: 'Column',\n            renderer: 'value',\n            queryFieldName: 'a',\n        },\n        {\n            displayName: 'Boolean',\n            renderer: 'someBool',\n            queryFieldName: 'b',\n        },\n    ];\n\n    refresh(eventData: GridState<Data>): void {\n        let data = [\n            { value: 'a', someBool: true },\n            { value: 'b', someBool: false },\n            { value: 'c', someBool: true },\n            { value: 'a', someBool: false },\n            { value: 'f', someBool: true },\n            { value: 'c', someBool: true },\n        ];\n        if (eventData.sortColumn) {\n            if (eventData.sortColumn.name === 'a') {\n                data = data.sort((a, b) => a.value.localeCompare(b.value));\n                if (eventData.sortColumn.reverse) {\n                    data = data.reverse();\n                }\n            }\n            if (eventData.sortColumn.name === 'b') {\n                data = data.sort((a, b) => (a.someBool === b.someBool ? 0 : a.someBool ? -1 : 1));\n                if (eventData.sortColumn.reverse) {\n                    data = data.reverse();\n                }\n            }\n        }\n        this.gridData = {\n            items: data,\n            totalItems: 2,\n        };\n    }\n}\n","/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridSortExampleComponent } from './datagrid-sort.example.component';\n\n@NgModule({\n    declarations: [DatagridSortExampleComponent],\n    imports: [CommonModule, ClarityModule, ReactiveFormsModule, DatagridModule],\n    exports: [DatagridSortExampleComponent],\n    entryComponents: [DatagridSortExampleComponent],\n})\nexport class DatagridSortExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component } from '@angular/core';\nimport {\n    BoldTextRendererComponent,\n    GridColumn,\n    GridDataFetchResult,\n    GridState,\n    RendererSpec,\n} from '@vcd/ui-components';\n\ninterface MockRecord {\n    name: string;\n    city: string;\n    state: string;\n    details: {\n        gender: string;\n    };\n    age: number;\n}\n\nconst mockData: MockRecord[] = [\n    {\n        name: 'Person 1',\n        city: 'Palo Alto',\n        state: 'CA',\n        details: {\n            gender: 'Male',\n        },\n        age: 30,\n    },\n    {\n        name: 'Person 2',\n        city: 'Boston',\n        state: 'MA',\n        details: {\n            gender: 'Female',\n        },\n        age: 60,\n    },\n];\n\n@Component({\n    template: `\n        <vcd-datagrid [gridData]=\"gridData\" (gridRefresh)=\"refresh($event)\" [columns]=\"columns\"></vcd-datagrid>\n    `,\n    selector: 'vcd-datagrd-three-rendererers-example',\n})\nexport class DatagridThreeRenderersExampleComponent {\n    gridData: GridDataFetchResult<MockRecord> = {\n        items: [],\n    };\n\n    columns: GridColumn<MockRecord>[] = [\n        {\n            displayName: 'Component Renderer',\n            renderer: RendererSpec({\n                type: BoldTextRendererComponent,\n                config: record => ({\n                    text: record.name,\n                }),\n            }),\n        },\n        {\n            displayName: 'Function Renderer',\n            renderer: (record: MockRecord) => `${record.city}, ${record.state}`,\n        },\n\n        {\n            displayName: 'Default Renderer',\n            renderer: 'details.gender',\n        },\n    ];\n\n    refresh(eventData: GridState<MockRecord>): void {\n        this.gridData = {\n            items: mockData,\n            totalItems: 2,\n        };\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClarityModule } from '@clr/angular';\nimport { DatagridModule } from '@vcd/ui-components';\nimport { DatagridThreeRenderersExampleComponent } from './datagrid-three-renderers.example.component';\n\n@NgModule({\n    declarations: [DatagridThreeRenderersExampleComponent],\n    imports: [CommonModule, ClarityModule, DatagridModule],\n    exports: [DatagridThreeRenderersExampleComponent],\n    entryComponents: [DatagridThreeRenderersExampleComponent],\n})\nexport class DatagridThreeRenderersExampleModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { DatagridShowHideExampleComponent } from './datagrid-show-hide.example.component';\nimport { DatagridComponent } from '@vcd/ui-components';\nimport { Documentation } from '@vcd/ui-doc-lib';\nimport { DatagridCssClassesExampleComponent } from './datagrid-css-classes.example.component';\nimport { DatagridThreeRenderersExampleComponent } from './datagrid-three-renderers.example.component';\nimport { DatagridThreeRenderersExampleModule } from './datagrid-three-renderers.example.module';\nimport { DatagridCssClassesExampleModule } from './datagrid-css-classes.example.module';\nimport { DatagridShowHideExampleModule } from './datagrid-show-hide.example.module';\nimport { DatagridDetailRowExampleComponent } from './datagrid-detail-row.example.component';\nimport { DatagridDetailRowExampleModule } from './datagrid-detail-row.example.module';\nimport { DatagridSortExampleModule } from './datagrid-sort.example.module';\nimport { DatagridSortExampleComponent } from './datagrid-sort.example.component';\nimport { DatagridRowSelectExampleComponent } from './datagrid-row-select.example.component';\nimport { DatagridRowSelectExampleModule } from './datagrid-row-select.example.module';\nimport { DatagridPaginationExampleComponent } from './datagrid-pagination-example.component';\nimport { DatagridPagionationExampleModule } from './datagrid-pagination-example.module';\n\nDocumentation.registerDocumentationEntry({\n    component: DatagridComponent,\n    displayName: 'Datagrid',\n    urlSegment: 'datagrid',\n    examples: [\n        {\n            component: DatagridThreeRenderersExampleComponent,\n            forComponent: null,\n            title: 'Example with 3 types of grid renderers',\n        },\n        {\n            component: DatagridCssClassesExampleComponent,\n            forComponent: null,\n            title: 'Component that holds an example of the css classes per row capability',\n        },\n        {\n            component: DatagridShowHideExampleComponent,\n            forComponent: null,\n            title: 'Show/Hide datagrid columns example',\n        },\n        {\n            component: DatagridDetailRowExampleComponent,\n            forComponent: null,\n            title: 'Detail row datagrid example',\n        },\n        {\n            component: DatagridSortExampleComponent,\n            forComponent: null,\n            title: 'Shows the sorting capability of the datagrid',\n        },\n        {\n            component: DatagridRowSelectExampleComponent,\n            forComponent: null,\n            title: 'Select datagrid row example',\n        },\n        {\n            component: DatagridPaginationExampleComponent,\n            forComponent: null,\n            title: 'Pagination functionality and text customization example',\n        },\n    ],\n});\n/**\n * A module that imports all data grid example modules\n */\n@NgModule({\n    imports: [\n        DatagridThreeRenderersExampleModule,\n        DatagridCssClassesExampleModule,\n        DatagridShowHideExampleModule,\n        DatagridDetailRowExampleModule,\n        DatagridSortExampleModule,\n        DatagridRowSelectExampleModule,\n        DatagridPagionationExampleModule,\n    ],\n})\nexport class DatagridExamplesModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { BOOTSTRAP_DETAILS } from '@vcd/i18n';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic([\n    {\n        provide: BOOTSTRAP_DETAILS,\n        useValue: {\n            locale: 'en',\n        },\n    },\n])\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}